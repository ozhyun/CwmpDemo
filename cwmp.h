// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* cwmp.h
   Generated by wsdl2h 2.8.44 from datamodels/cwmp-1-0.xsd and gsoap/typemap.dat
   2017-03-11 04:50:58 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on cwmp.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stl.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   urn:dslforum-org:cwmp-1-0                                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

cwmp = "urn:dslforum-org:cwmp-1-0"

*/

#define SOAP_NAMESPACE_OF_cwmp	"urn:dslforum-org:cwmp-1-0"
//gsoap cwmp  schema namespace:	urn:dslforum-org:cwmp-1-0
//gsoap cwmp  schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in XSD type "SOAP-ENC:base64".
struct SOAP_ENC__base64 { unsigned char *__ptr; int __size; };

/// Built-in XSD type "xs:boolean".
enum xsd__boolean { xsd__boolean__false_, xsd__boolean__true_ };

/// Primitive built-in type "xs:anySimpleType".
typedef char* xsd__anySimpleType;



/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:dslforum-org:cwmp-1-0                                                *
 *                                                                            *
\******************************************************************************/

/// @brief Union of values from type "xs:unsignedInt".
/// @brief Union of values from type "xs:unsignedInt".
/// @brief Union of values from type "xs:unsignedInt".
/// @brief Union of values from type "xs:unsignedInt".
typedef char* cwmp__FaultCodeType;

/// @brief "urn:dslforum-org:cwmp-1-0":ParameterKeyType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 32.
typedef char* cwmp__ParameterKeyType : 32;

/// @brief "urn:dslforum-org:cwmp-1-0":CommandKeyType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 32.
typedef char* cwmp__CommandKeyType : 32;

/// @brief "urn:dslforum-org:cwmp-1-0":ObjectNameType is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 256.
/// Content pattern is ".*\\.".
typedef char* cwmp__ObjectNameType ".*\\." : 256;


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:dslforum-org:cwmp-1-0                                                *
 *                                                                            *
\******************************************************************************/

/// @brief "urn:dslforum-org:cwmp-1-0":FaultStruct is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Fault information for TransferComplete
/// </BLOCKQUOTE></PRE>
/// struct cwmp__FaultStruct operations:
/// - cwmp__FaultStruct* soap_new_cwmp__FaultStruct(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_cwmp__FaultStruct(struct soap*, cwmp__FaultStruct*) default initialize members
/// - int soap_read_cwmp__FaultStruct(struct soap*, cwmp__FaultStruct*) deserialize from a source
/// - int soap_write_cwmp__FaultStruct(struct soap*, cwmp__FaultStruct*) serialize to a sink
/// - cwmp__FaultStruct* soap_dup_cwmp__FaultStruct(struct soap*, cwmp__FaultStruct* dst, cwmp__FaultStruct *src) returns deep copy of cwmp__FaultStruct src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_cwmp__FaultStruct(cwmp__FaultStruct*) deep deletes cwmp__FaultStruct data members, use only on dst after soap_dup_cwmp__FaultStruct(NULL, cwmp__FaultStruct *dst, cwmp__FaultStruct *src) (use soapcpp2 -Ed)
struct cwmp__FaultStruct
{
/// <PRE><BLOCKQUOTE>
///   Transfer fault codes
/// </BLOCKQUOTE></PRE>
    enum _cwmp__FaultStruct_FaultCode
    {
/// <PRE><BLOCKQUOTE>
///   No fault
/// </BLOCKQUOTE></PRE>
	_cwmp__FaultStruct_FaultCode__0 = 0,	///< xs:unsignedInt value="0"
/// <PRE><BLOCKQUOTE>
///   Request denied (no reason specified)
/// </BLOCKQUOTE></PRE>
	_cwmp__FaultStruct_FaultCode__9001 = 9001,	///< xs:unsignedInt value="9001"
/// <PRE><BLOCKQUOTE>
///   Internal error
/// </BLOCKQUOTE></PRE>
	_cwmp__FaultStruct_FaultCode__9002 = 9002,	///< xs:unsignedInt value="9002"
/// <PRE><BLOCKQUOTE>
///   Download failure
/// </BLOCKQUOTE></PRE>
	_cwmp__FaultStruct_FaultCode__9010 = 9010,	///< xs:unsignedInt value="9010"
/// <PRE><BLOCKQUOTE>
///   Upload failure
/// </BLOCKQUOTE></PRE>
	_cwmp__FaultStruct_FaultCode__9011 = 9011,	///< xs:unsignedInt value="9011"
/// <PRE><BLOCKQUOTE>
///   File transfer server authentication failure
/// </BLOCKQUOTE></PRE>
	_cwmp__FaultStruct_FaultCode__9012 = 9012,	///< xs:unsignedInt value="9012"
    }
                                         FaultCode                      1;	///< Required element.
/// Length of this string is 0 to 256.
    char*                                                              
                                         FaultString                    1;	///< Required element.
};

/// @brief "urn:dslforum-org:cwmp-1-0":DeviceIdStruct is a complexType.
///
/// struct cwmp__DeviceIdStruct operations:
/// - cwmp__DeviceIdStruct* soap_new_cwmp__DeviceIdStruct(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_cwmp__DeviceIdStruct(struct soap*, cwmp__DeviceIdStruct*) default initialize members
/// - int soap_read_cwmp__DeviceIdStruct(struct soap*, cwmp__DeviceIdStruct*) deserialize from a source
/// - int soap_write_cwmp__DeviceIdStruct(struct soap*, cwmp__DeviceIdStruct*) serialize to a sink
/// - cwmp__DeviceIdStruct* soap_dup_cwmp__DeviceIdStruct(struct soap*, cwmp__DeviceIdStruct* dst, cwmp__DeviceIdStruct *src) returns deep copy of cwmp__DeviceIdStruct src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_cwmp__DeviceIdStruct(cwmp__DeviceIdStruct*) deep deletes cwmp__DeviceIdStruct data members, use only on dst after soap_dup_cwmp__DeviceIdStruct(NULL, cwmp__DeviceIdStruct *dst, cwmp__DeviceIdStruct *src) (use soapcpp2 -Ed)
struct cwmp__DeviceIdStruct
{
/// Length of this string is 0 to 64.
    char*                                                              
                                         Manufacturer                   1;	///< Required element.
/// Length of this string is 6.
/// Content pattern is "[0-9A-F]{6}".
    char*                                                              
                                         OUI                            1;	///< Required element.
/// Length of this string is 0 to 64.
    char*                                                              
                                         ProductClass                   1;	///< Required element.
/// Length of this string is 0 to 64.
    char*                                                              
                                         SerialNumber                   1;	///< Required element.
};

/// @brief "urn:dslforum-org:cwmp-1-0":EventStruct is a complexType.
///
/// struct cwmp__EventStruct operations:
/// - cwmp__EventStruct* soap_new_cwmp__EventStruct(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_cwmp__EventStruct(struct soap*, cwmp__EventStruct*) default initialize members
/// - int soap_read_cwmp__EventStruct(struct soap*, cwmp__EventStruct*) deserialize from a source
/// - int soap_write_cwmp__EventStruct(struct soap*, cwmp__EventStruct*) serialize to a sink
/// - cwmp__EventStruct* soap_dup_cwmp__EventStruct(struct soap*, cwmp__EventStruct* dst, cwmp__EventStruct *src) returns deep copy of cwmp__EventStruct src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_cwmp__EventStruct(cwmp__EventStruct*) deep deletes cwmp__EventStruct data members, use only on dst after soap_dup_cwmp__EventStruct(NULL, cwmp__EventStruct *dst, cwmp__EventStruct *src) (use soapcpp2 -Ed)
struct cwmp__EventStruct
{
/// Length of this string is 0 to 64.
/// Content pattern is "0 BOOTSTRAP".
/// Content pattern is "1 BOOT".
/// Content pattern is "2 PERIODIC".
/// Content pattern is "3 SCHEDULED".
/// Content pattern is "4 VALUE CHANGE".
/// Content pattern is "5 KICKED".
/// Content pattern is "6 CONNECTION REQUEST".
/// Content pattern is "7 TRANSFER COMPLETE".
/// Content pattern is "8 DIAGNOSTICS COMPLETE".
/// Content pattern is "9 REQUEST DOWNLOAD".
/// Content pattern is "M Reboot".
/// Content pattern is "M ScheduleInform".
/// Content pattern is "M Download".
/// Content pattern is "M Upload".
/// Content pattern is "M X_\\S+".
/// Content pattern is "X [0-9A-F]{6} .*".
    char*                                                              
                                         EventCode                      1;	///< Required element.
/// Element "CommandKey" of XSD type "urn:dslforum-org:cwmp-1-0":CommandKeyType.
    cwmp__CommandKeyType                 CommandKey                     1;	///< Required element.
};

/// @brief "urn:dslforum-org:cwmp-1-0":ParameterValueStruct is a complexType.
///
/// struct cwmp__ParameterValueStruct operations:
/// - cwmp__ParameterValueStruct* soap_new_cwmp__ParameterValueStruct(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_cwmp__ParameterValueStruct(struct soap*, cwmp__ParameterValueStruct*) default initialize members
/// - int soap_read_cwmp__ParameterValueStruct(struct soap*, cwmp__ParameterValueStruct*) deserialize from a source
/// - int soap_write_cwmp__ParameterValueStruct(struct soap*, cwmp__ParameterValueStruct*) serialize to a sink
/// - cwmp__ParameterValueStruct* soap_dup_cwmp__ParameterValueStruct(struct soap*, cwmp__ParameterValueStruct* dst, cwmp__ParameterValueStruct *src) returns deep copy of cwmp__ParameterValueStruct src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_cwmp__ParameterValueStruct(cwmp__ParameterValueStruct*) deep deletes cwmp__ParameterValueStruct data members, use only on dst after soap_dup_cwmp__ParameterValueStruct(NULL, cwmp__ParameterValueStruct *dst, cwmp__ParameterValueStruct *src) (use soapcpp2 -Ed)
struct cwmp__ParameterValueStruct
{
/// Length of this string is 0 to 256.
    char*                                                              
                                         Name                           1;	///< Required element.
/// Element "Value" of XSD type xs:anySimpleType.
    xsd__anySimpleType                   Value                          1;	///< Required element.
};

/// @brief "urn:dslforum-org:cwmp-1-0":ParameterInfoStruct is a complexType.
///
/// struct cwmp__ParameterInfoStruct operations:
/// - cwmp__ParameterInfoStruct* soap_new_cwmp__ParameterInfoStruct(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_cwmp__ParameterInfoStruct(struct soap*, cwmp__ParameterInfoStruct*) default initialize members
/// - int soap_read_cwmp__ParameterInfoStruct(struct soap*, cwmp__ParameterInfoStruct*) deserialize from a source
/// - int soap_write_cwmp__ParameterInfoStruct(struct soap*, cwmp__ParameterInfoStruct*) serialize to a sink
/// - cwmp__ParameterInfoStruct* soap_dup_cwmp__ParameterInfoStruct(struct soap*, cwmp__ParameterInfoStruct* dst, cwmp__ParameterInfoStruct *src) returns deep copy of cwmp__ParameterInfoStruct src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_cwmp__ParameterInfoStruct(cwmp__ParameterInfoStruct*) deep deletes cwmp__ParameterInfoStruct data members, use only on dst after soap_dup_cwmp__ParameterInfoStruct(NULL, cwmp__ParameterInfoStruct *dst, cwmp__ParameterInfoStruct *src) (use soapcpp2 -Ed)
struct cwmp__ParameterInfoStruct
{
/// Length of this string is 0 to 256.
    char*                                                              
                                         Name                           1;	///< Required element.
/// Element "Writable" of XSD type xs:boolean.
    enum xsd__boolean                    Writable                       1;	///< Required element.
};

/// @brief "urn:dslforum-org:cwmp-1-0":SetParameterAttributesStruct is a complexType.
///
/// struct cwmp__SetParameterAttributesStruct operations:
/// - cwmp__SetParameterAttributesStruct* soap_new_cwmp__SetParameterAttributesStruct(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_cwmp__SetParameterAttributesStruct(struct soap*, cwmp__SetParameterAttributesStruct*) default initialize members
/// - int soap_read_cwmp__SetParameterAttributesStruct(struct soap*, cwmp__SetParameterAttributesStruct*) deserialize from a source
/// - int soap_write_cwmp__SetParameterAttributesStruct(struct soap*, cwmp__SetParameterAttributesStruct*) serialize to a sink
/// - cwmp__SetParameterAttributesStruct* soap_dup_cwmp__SetParameterAttributesStruct(struct soap*, cwmp__SetParameterAttributesStruct* dst, cwmp__SetParameterAttributesStruct *src) returns deep copy of cwmp__SetParameterAttributesStruct src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_cwmp__SetParameterAttributesStruct(cwmp__SetParameterAttributesStruct*) deep deletes cwmp__SetParameterAttributesStruct data members, use only on dst after soap_dup_cwmp__SetParameterAttributesStruct(NULL, cwmp__SetParameterAttributesStruct *dst, cwmp__SetParameterAttributesStruct *src) (use soapcpp2 -Ed)
struct cwmp__SetParameterAttributesStruct
{
/// Length of this string is 0 to 256.
    char*                                                              
                                        *Name                           nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "NotificationChange" of XSD type xs:boolean.
    enum xsd__boolean                    NotificationChange             1;	///< Required element.
    enum _cwmp__SetParameterAttributesStruct_Notification
    {
/// <PRE><BLOCKQUOTE>
///   Notification off. The CPE need not inform the ACS of a change to the specified parameter(s)
/// </BLOCKQUOTE></PRE>
	_cwmp__SetParameterAttributesStruct_Notification__0 = 0,	///< xs:int value="0"
/// <PRE><BLOCKQUOTE>
///   Passive notification. Whenever the specified parameter value changes, the CPE MUST include the new value in the ParameterList in the Inform message that is sent the next time a session is established to the ACS
/// </BLOCKQUOTE></PRE>
	_cwmp__SetParameterAttributesStruct_Notification__1 = 1,	///< xs:int value="1"
/// <PRE><BLOCKQUOTE>
///   Active notification. Whenever the specified parameter value changes, the CPE MUST initiate a session to the ACS, and include the new value in the ParameterList in the associated Inform message
/// </BLOCKQUOTE></PRE>
	_cwmp__SetParameterAttributesStruct_Notification__2 = 2,	///< xs:int value="2"
    }
                                         Notification                   1;	///< Required element.
/// Element "AccessListChange" of XSD type xs:boolean.
    enum xsd__boolean                    AccessListChange               1;	///< Required element.
/// Element "AccessList" of XSD type "urn:dslforum-org:cwmp-1-0":AccessList.
    struct AccessList*                   AccessList                     1;	///< Required element.
};

/// @brief "urn:dslforum-org:cwmp-1-0":ParameterAttributeStruct is a complexType.
///
/// struct cwmp__ParameterAttributeStruct operations:
/// - cwmp__ParameterAttributeStruct* soap_new_cwmp__ParameterAttributeStruct(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_cwmp__ParameterAttributeStruct(struct soap*, cwmp__ParameterAttributeStruct*) default initialize members
/// - int soap_read_cwmp__ParameterAttributeStruct(struct soap*, cwmp__ParameterAttributeStruct*) deserialize from a source
/// - int soap_write_cwmp__ParameterAttributeStruct(struct soap*, cwmp__ParameterAttributeStruct*) serialize to a sink
/// - cwmp__ParameterAttributeStruct* soap_dup_cwmp__ParameterAttributeStruct(struct soap*, cwmp__ParameterAttributeStruct* dst, cwmp__ParameterAttributeStruct *src) returns deep copy of cwmp__ParameterAttributeStruct src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_cwmp__ParameterAttributeStruct(cwmp__ParameterAttributeStruct*) deep deletes cwmp__ParameterAttributeStruct data members, use only on dst after soap_dup_cwmp__ParameterAttributeStruct(NULL, cwmp__ParameterAttributeStruct *dst, cwmp__ParameterAttributeStruct *src) (use soapcpp2 -Ed)
struct cwmp__ParameterAttributeStruct
{
/// Length of this string is 0 to 256.
    char*                                                              
                                         Name                           1;	///< Required element.
    enum _cwmp__ParameterAttributeStruct_Notification
    {
	_cwmp__ParameterAttributeStruct_Notification__0 = 0,	///< xs:int value="0"
	_cwmp__ParameterAttributeStruct_Notification__1 = 1,	///< xs:int value="1"
	_cwmp__ParameterAttributeStruct_Notification__2 = 2,	///< xs:int value="2"
    }
                                         Notification                   1;	///< Required element.
/// Element "AccessList" of XSD type "urn:dslforum-org:cwmp-1-0":AccessList.
    struct AccessList*                   AccessList                     1;	///< Required element.
};

/// @brief "urn:dslforum-org:cwmp-1-0":QueuedTransferStruct is a complexType.
///
/// struct cwmp__QueuedTransferStruct operations:
/// - cwmp__QueuedTransferStruct* soap_new_cwmp__QueuedTransferStruct(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_cwmp__QueuedTransferStruct(struct soap*, cwmp__QueuedTransferStruct*) default initialize members
/// - int soap_read_cwmp__QueuedTransferStruct(struct soap*, cwmp__QueuedTransferStruct*) deserialize from a source
/// - int soap_write_cwmp__QueuedTransferStruct(struct soap*, cwmp__QueuedTransferStruct*) serialize to a sink
/// - cwmp__QueuedTransferStruct* soap_dup_cwmp__QueuedTransferStruct(struct soap*, cwmp__QueuedTransferStruct* dst, cwmp__QueuedTransferStruct *src) returns deep copy of cwmp__QueuedTransferStruct src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_cwmp__QueuedTransferStruct(cwmp__QueuedTransferStruct*) deep deletes cwmp__QueuedTransferStruct data members, use only on dst after soap_dup_cwmp__QueuedTransferStruct(NULL, cwmp__QueuedTransferStruct *dst, cwmp__QueuedTransferStruct *src) (use soapcpp2 -Ed)
struct cwmp__QueuedTransferStruct
{
/// Element "CommandKey" of XSD type "urn:dslforum-org:cwmp-1-0":CommandKeyType.
    cwmp__CommandKeyType                 CommandKey                     1;	///< Required element.
    enum _cwmp__QueuedTransferStruct_State
    {
/// <PRE><BLOCKQUOTE>
///   1 - Not yet started
/// </BLOCKQUOTE></PRE>
	_cwmp__QueuedTransferStruct_State__1 = 1,	///< xs:int value="1"
/// <PRE><BLOCKQUOTE>
///   2 - In progress
/// </BLOCKQUOTE></PRE>
	_cwmp__QueuedTransferStruct_State__2 = 2,	///< xs:int value="2"
/// <PRE><BLOCKQUOTE>
///   3 - Completed
/// </BLOCKQUOTE></PRE>
	_cwmp__QueuedTransferStruct_State__3 = 3,	///< xs:int value="3"
    }
                                         State                          1;	///< Required element.
};

/// @brief "urn:dslforum-org:cwmp-1-0":OptionStruct is a complexType.
///
/// struct cwmp__OptionStruct operations:
/// - cwmp__OptionStruct* soap_new_cwmp__OptionStruct(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_cwmp__OptionStruct(struct soap*, cwmp__OptionStruct*) default initialize members
/// - int soap_read_cwmp__OptionStruct(struct soap*, cwmp__OptionStruct*) deserialize from a source
/// - int soap_write_cwmp__OptionStruct(struct soap*, cwmp__OptionStruct*) serialize to a sink
/// - cwmp__OptionStruct* soap_dup_cwmp__OptionStruct(struct soap*, cwmp__OptionStruct* dst, cwmp__OptionStruct *src) returns deep copy of cwmp__OptionStruct src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_cwmp__OptionStruct(cwmp__OptionStruct*) deep deletes cwmp__OptionStruct data members, use only on dst after soap_dup_cwmp__OptionStruct(NULL, cwmp__OptionStruct *dst, cwmp__OptionStruct *src) (use soapcpp2 -Ed)
struct cwmp__OptionStruct
{
/// Length of this string is 0 to 64.
    char*                                                              
                                         OptionName                     1;	///< Required element.
/// Element "VoucherSN" of XSD type xs:unsignedInt.
    unsigned int                         VoucherSN                      1;	///< Required element.
    enum _cwmp__OptionStruct_State
    {
/// <PRE><BLOCKQUOTE>
///   Option is disabled and not setup
/// </BLOCKQUOTE></PRE>
	_cwmp__OptionStruct_State__0 = 0,	///< xs:unsignedInt value="0"
/// <PRE><BLOCKQUOTE>
///   Option is enabled and not setup
/// </BLOCKQUOTE></PRE>
	_cwmp__OptionStruct_State__1 = 1,	///< xs:unsignedInt value="1"
/// <PRE><BLOCKQUOTE>
///   Option is disabled and setup
/// </BLOCKQUOTE></PRE>
	_cwmp__OptionStruct_State__2 = 2,	///< xs:unsignedInt value="2"
/// <PRE><BLOCKQUOTE>
///   Option is enabled and setup
/// </BLOCKQUOTE></PRE>
	_cwmp__OptionStruct_State__3 = 3,	///< xs:unsignedInt value="3"
    }
                                         State                          1;	///< Required element.
    enum _cwmp__OptionStruct_Mode
    {
/// <PRE><BLOCKQUOTE>
///   0 - Disabled
/// </BLOCKQUOTE></PRE>
	_cwmp__OptionStruct_Mode__0 = 0,	///< xs:int value="0"
/// <PRE><BLOCKQUOTE>
///   1 - Enabled with expiration
/// </BLOCKQUOTE></PRE>
	_cwmp__OptionStruct_Mode__1 = 1,	///< xs:int value="1"
/// <PRE><BLOCKQUOTE>
///   2 - Enabled without expiration
/// </BLOCKQUOTE></PRE>
	_cwmp__OptionStruct_Mode__2 = 2,	///< xs:int value="2"
    }
                                         Mode                           1;	///< Required element.
/// Element "StartDate" of XSD type xs:dateTime.
    time_t                               StartDate                      1;	///< Required element.
/// Element "ExpirationDate" of XSD type xs:dateTime.
    time_t*                              ExpirationDate                 0;	///< Optional element.
    enum _cwmp__OptionStruct_IsTransferable
    {
/// <PRE><BLOCKQUOTE>
///   Non-transferable
/// </BLOCKQUOTE></PRE>
	_cwmp__OptionStruct_IsTransferable__0 = 0,	///< xs:int value="0"
/// <PRE><BLOCKQUOTE>
///   Transferable
/// </BLOCKQUOTE></PRE>
	_cwmp__OptionStruct_IsTransferable__1 = 1,	///< xs:int value="1"
    }
                                         IsTransferable                 1;	///< Required element.
};

/// @brief "urn:dslforum-org:cwmp-1-0":ArgStruct is a complexType.
///
/// struct cwmp__ArgStruct operations:
/// - cwmp__ArgStruct* soap_new_cwmp__ArgStruct(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_cwmp__ArgStruct(struct soap*, cwmp__ArgStruct*) default initialize members
/// - int soap_read_cwmp__ArgStruct(struct soap*, cwmp__ArgStruct*) deserialize from a source
/// - int soap_write_cwmp__ArgStruct(struct soap*, cwmp__ArgStruct*) serialize to a sink
/// - cwmp__ArgStruct* soap_dup_cwmp__ArgStruct(struct soap*, cwmp__ArgStruct* dst, cwmp__ArgStruct *src) returns deep copy of cwmp__ArgStruct src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_cwmp__ArgStruct(cwmp__ArgStruct*) deep deletes cwmp__ArgStruct data members, use only on dst after soap_dup_cwmp__ArgStruct(NULL, cwmp__ArgStruct *dst, cwmp__ArgStruct *src) (use soapcpp2 -Ed)
struct cwmp__ArgStruct
{
/// Length of this string is 0 to 64.
    char*                                                              
                                         Name                           1;	///< Required element.
/// Length of this string is 0 to 256.
    char*                                                              
                                         Value                          1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":Fault
/// @brief "urn:dslforum-org:cwmp-1-0":Fault is a complexType.
///
/// struct _cwmp__Fault operations:
/// - _cwmp__Fault* soap_new__cwmp__Fault(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__Fault(struct soap*, _cwmp__Fault*) default initialize members
/// - int soap_read__cwmp__Fault(struct soap*, _cwmp__Fault*) deserialize from a source
/// - int soap_write__cwmp__Fault(struct soap*, _cwmp__Fault*) serialize to a sink
/// - _cwmp__Fault* soap_dup__cwmp__Fault(struct soap*, _cwmp__Fault* dst, _cwmp__Fault *src) returns deep copy of _cwmp__Fault src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__Fault(_cwmp__Fault*) deep deletes _cwmp__Fault data members, use only on dst after soap_dup__cwmp__Fault(NULL, _cwmp__Fault *dst, _cwmp__Fault *src) (use soapcpp2 -Ed)
struct _cwmp__Fault
{
/// Element "FaultCode" of XSD type "urn:dslforum-org:cwmp-1-0":FaultCodeType.
    cwmp__FaultCodeType                  FaultCode                      1;	///< Required element.
/// Element "FaultString" of XSD type xs:string.
    char*                                FaultString                    0;	///< Optional element.
/// Size of SetParameterValuesFault array is 0..unbounded.
   $int                                  __sizeSetParameterValuesFault  0;
/// struct _cwmp__Fault_SetParameterValuesFault operations:
/// - _cwmp__Fault_SetParameterValuesFault* soap_new__cwmp__Fault_SetParameterValuesFault(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__Fault_SetParameterValuesFault(struct soap*, _cwmp__Fault_SetParameterValuesFault*) default initialize members
/// - int soap_read__cwmp__Fault_SetParameterValuesFault(struct soap*, _cwmp__Fault_SetParameterValuesFault*) deserialize from a source
/// - int soap_write__cwmp__Fault_SetParameterValuesFault(struct soap*, _cwmp__Fault_SetParameterValuesFault*) serialize to a sink
/// - _cwmp__Fault_SetParameterValuesFault* soap_dup__cwmp__Fault_SetParameterValuesFault(struct soap*, _cwmp__Fault_SetParameterValuesFault* dst, _cwmp__Fault_SetParameterValuesFault *src) returns deep copy of _cwmp__Fault_SetParameterValuesFault src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__Fault_SetParameterValuesFault(_cwmp__Fault_SetParameterValuesFault*) deep deletes _cwmp__Fault_SetParameterValuesFault data members, use only on dst after soap_dup__cwmp__Fault_SetParameterValuesFault(NULL, _cwmp__Fault_SetParameterValuesFault *dst, _cwmp__Fault_SetParameterValuesFault *src) (use soapcpp2 -Ed)
    struct _cwmp__Fault_SetParameterValuesFault
    {
/// Element "ParameterName" of XSD type xs:string.
    char*                                ParameterName                  1;	///< Required element.
/// Element "FaultCode" of XSD type "urn:dslforum-org:cwmp-1-0":FaultCodeType.
    cwmp__FaultCodeType                  FaultCode                      1;	///< Required element.
/// Element "FaultString" of XSD type xs:string.
    char*                                FaultString                    0;	///< Optional element.
    }                                   *SetParameterValuesFault        0;
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":GetRPCMethods
/// <PRE><BLOCKQUOTE>
///   GeRPCMethods message - Annex A.3.1.1
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":GetRPCMethods is a complexType.
///
/// struct _cwmp__GetRPCMethods operations:
/// - _cwmp__GetRPCMethods* soap_new__cwmp__GetRPCMethods(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__GetRPCMethods(struct soap*, _cwmp__GetRPCMethods*) default initialize members
/// - int soap_read__cwmp__GetRPCMethods(struct soap*, _cwmp__GetRPCMethods*) deserialize from a source
/// - int soap_write__cwmp__GetRPCMethods(struct soap*, _cwmp__GetRPCMethods*) serialize to a sink
/// - _cwmp__GetRPCMethods* soap_dup__cwmp__GetRPCMethods(struct soap*, _cwmp__GetRPCMethods* dst, _cwmp__GetRPCMethods *src) returns deep copy of _cwmp__GetRPCMethods src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__GetRPCMethods(_cwmp__GetRPCMethods*) deep deletes _cwmp__GetRPCMethods data members, use only on dst after soap_dup__cwmp__GetRPCMethods(NULL, _cwmp__GetRPCMethods *dst, _cwmp__GetRPCMethods *src) (use soapcpp2 -Ed)
struct _cwmp__GetRPCMethods
{
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":GetRPCMethodsResponse
/// <PRE><BLOCKQUOTE>
///   GeRPCMethodsResponse message - Annex A.3.1.1
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":GetRPCMethodsResponse is a complexType.
///
/// struct _cwmp__GetRPCMethodsResponse operations:
/// - _cwmp__GetRPCMethodsResponse* soap_new__cwmp__GetRPCMethodsResponse(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__GetRPCMethodsResponse(struct soap*, _cwmp__GetRPCMethodsResponse*) default initialize members
/// - int soap_read__cwmp__GetRPCMethodsResponse(struct soap*, _cwmp__GetRPCMethodsResponse*) deserialize from a source
/// - int soap_write__cwmp__GetRPCMethodsResponse(struct soap*, _cwmp__GetRPCMethodsResponse*) serialize to a sink
/// - _cwmp__GetRPCMethodsResponse* soap_dup__cwmp__GetRPCMethodsResponse(struct soap*, _cwmp__GetRPCMethodsResponse* dst, _cwmp__GetRPCMethodsResponse *src) returns deep copy of _cwmp__GetRPCMethodsResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__GetRPCMethodsResponse(_cwmp__GetRPCMethodsResponse*) deep deletes _cwmp__GetRPCMethodsResponse data members, use only on dst after soap_dup__cwmp__GetRPCMethodsResponse(NULL, _cwmp__GetRPCMethodsResponse *dst, _cwmp__GetRPCMethodsResponse *src) (use soapcpp2 -Ed)
struct _cwmp__GetRPCMethodsResponse
{
/// Element "MethodList" of XSD type "urn:dslforum-org:cwmp-1-0":MethodList.
    struct MethodList*                   MethodList                     1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":SetParameterValues
/// <PRE><BLOCKQUOTE>
///   SetParameterValues message - Annex A.3.2.1
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":SetParameterValues is a complexType.
///
/// struct _cwmp__SetParameterValues operations:
/// - _cwmp__SetParameterValues* soap_new__cwmp__SetParameterValues(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__SetParameterValues(struct soap*, _cwmp__SetParameterValues*) default initialize members
/// - int soap_read__cwmp__SetParameterValues(struct soap*, _cwmp__SetParameterValues*) deserialize from a source
/// - int soap_write__cwmp__SetParameterValues(struct soap*, _cwmp__SetParameterValues*) serialize to a sink
/// - _cwmp__SetParameterValues* soap_dup__cwmp__SetParameterValues(struct soap*, _cwmp__SetParameterValues* dst, _cwmp__SetParameterValues *src) returns deep copy of _cwmp__SetParameterValues src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__SetParameterValues(_cwmp__SetParameterValues*) deep deletes _cwmp__SetParameterValues data members, use only on dst after soap_dup__cwmp__SetParameterValues(NULL, _cwmp__SetParameterValues *dst, _cwmp__SetParameterValues *src) (use soapcpp2 -Ed)
struct _cwmp__SetParameterValues
{
/// Element "ParameterList" of XSD type "urn:dslforum-org:cwmp-1-0":ParameterValueList.
    struct ParameterValueList*           ParameterList                  1;	///< Required element.
/// Element "ParameterKey" of XSD type "urn:dslforum-org:cwmp-1-0":ParameterKeyType.
    cwmp__ParameterKeyType               ParameterKey                   1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":SetParameterValuesResponse
/// <PRE><BLOCKQUOTE>
///   SetParameterValuesResponse message - Annex A.3.2.1
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":SetParameterValuesResponse is a complexType.
///
/// struct _cwmp__SetParameterValuesResponse operations:
/// - _cwmp__SetParameterValuesResponse* soap_new__cwmp__SetParameterValuesResponse(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__SetParameterValuesResponse(struct soap*, _cwmp__SetParameterValuesResponse*) default initialize members
/// - int soap_read__cwmp__SetParameterValuesResponse(struct soap*, _cwmp__SetParameterValuesResponse*) deserialize from a source
/// - int soap_write__cwmp__SetParameterValuesResponse(struct soap*, _cwmp__SetParameterValuesResponse*) serialize to a sink
/// - _cwmp__SetParameterValuesResponse* soap_dup__cwmp__SetParameterValuesResponse(struct soap*, _cwmp__SetParameterValuesResponse* dst, _cwmp__SetParameterValuesResponse *src) returns deep copy of _cwmp__SetParameterValuesResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__SetParameterValuesResponse(_cwmp__SetParameterValuesResponse*) deep deletes _cwmp__SetParameterValuesResponse data members, use only on dst after soap_dup__cwmp__SetParameterValuesResponse(NULL, _cwmp__SetParameterValuesResponse *dst, _cwmp__SetParameterValuesResponse *src) (use soapcpp2 -Ed)
struct _cwmp__SetParameterValuesResponse
{
    enum _cwmp__SetParameterValuesResponse_Status
    {
/// <PRE><BLOCKQUOTE>
///   All Parameter changes have been validated and applied
/// </BLOCKQUOTE></PRE>
	_cwmp__SetParameterValuesResponse_Status__0 = 0,	///< xs:int value="0"
/// <PRE><BLOCKQUOTE>
///   All Parameter changes have been validated and committed, but some or all are not yet applied (for example, if a reboot is required before the new values are applied)
/// </BLOCKQUOTE></PRE>
	_cwmp__SetParameterValuesResponse_Status__1 = 1,	///< xs:int value="1"
    }
                                         Status                         1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":GetParameterValues
/// <PRE><BLOCKQUOTE>
///   GetParameterValues message - Annex A.3.2.2
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":GetParameterValues is a complexType.
///
/// struct _cwmp__GetParameterValues operations:
/// - _cwmp__GetParameterValues* soap_new__cwmp__GetParameterValues(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__GetParameterValues(struct soap*, _cwmp__GetParameterValues*) default initialize members
/// - int soap_read__cwmp__GetParameterValues(struct soap*, _cwmp__GetParameterValues*) deserialize from a source
/// - int soap_write__cwmp__GetParameterValues(struct soap*, _cwmp__GetParameterValues*) serialize to a sink
/// - _cwmp__GetParameterValues* soap_dup__cwmp__GetParameterValues(struct soap*, _cwmp__GetParameterValues* dst, _cwmp__GetParameterValues *src) returns deep copy of _cwmp__GetParameterValues src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__GetParameterValues(_cwmp__GetParameterValues*) deep deletes _cwmp__GetParameterValues data members, use only on dst after soap_dup__cwmp__GetParameterValues(NULL, _cwmp__GetParameterValues *dst, _cwmp__GetParameterValues *src) (use soapcpp2 -Ed)
struct _cwmp__GetParameterValues
{
/// Element "ParameterNames" of XSD type "urn:dslforum-org:cwmp-1-0":ParameterNames.
    struct ParameterNames*               ParameterNames                 1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":GetParameterValuesResponse
/// <PRE><BLOCKQUOTE>
///   GetParameterValuesResponse message - Annex A.3.2.2
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":GetParameterValuesResponse is a complexType.
///
/// struct _cwmp__GetParameterValuesResponse operations:
/// - _cwmp__GetParameterValuesResponse* soap_new__cwmp__GetParameterValuesResponse(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__GetParameterValuesResponse(struct soap*, _cwmp__GetParameterValuesResponse*) default initialize members
/// - int soap_read__cwmp__GetParameterValuesResponse(struct soap*, _cwmp__GetParameterValuesResponse*) deserialize from a source
/// - int soap_write__cwmp__GetParameterValuesResponse(struct soap*, _cwmp__GetParameterValuesResponse*) serialize to a sink
/// - _cwmp__GetParameterValuesResponse* soap_dup__cwmp__GetParameterValuesResponse(struct soap*, _cwmp__GetParameterValuesResponse* dst, _cwmp__GetParameterValuesResponse *src) returns deep copy of _cwmp__GetParameterValuesResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__GetParameterValuesResponse(_cwmp__GetParameterValuesResponse*) deep deletes _cwmp__GetParameterValuesResponse data members, use only on dst after soap_dup__cwmp__GetParameterValuesResponse(NULL, _cwmp__GetParameterValuesResponse *dst, _cwmp__GetParameterValuesResponse *src) (use soapcpp2 -Ed)
struct _cwmp__GetParameterValuesResponse
{
/// Element "ParameterList" of XSD type "urn:dslforum-org:cwmp-1-0":ParameterValueList.
    struct ParameterValueList*           ParameterList                  1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":GetParameterNames
/// <PRE><BLOCKQUOTE>
///   GetParameterNames message - Annex A.3.2.3
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":GetParameterNames is a complexType.
///
/// struct _cwmp__GetParameterNames operations:
/// - _cwmp__GetParameterNames* soap_new__cwmp__GetParameterNames(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__GetParameterNames(struct soap*, _cwmp__GetParameterNames*) default initialize members
/// - int soap_read__cwmp__GetParameterNames(struct soap*, _cwmp__GetParameterNames*) deserialize from a source
/// - int soap_write__cwmp__GetParameterNames(struct soap*, _cwmp__GetParameterNames*) serialize to a sink
/// - _cwmp__GetParameterNames* soap_dup__cwmp__GetParameterNames(struct soap*, _cwmp__GetParameterNames* dst, _cwmp__GetParameterNames *src) returns deep copy of _cwmp__GetParameterNames src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__GetParameterNames(_cwmp__GetParameterNames*) deep deletes _cwmp__GetParameterNames data members, use only on dst after soap_dup__cwmp__GetParameterNames(NULL, _cwmp__GetParameterNames *dst, _cwmp__GetParameterNames *src) (use soapcpp2 -Ed)
struct _cwmp__GetParameterNames
{
/// Length of this string is 0 to 256.
    char*                                                              
                                        *ParameterPath                  nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "NextLevel" of XSD type xs:boolean.
    enum xsd__boolean                    NextLevel                      1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":GetParameterNamesResponse
/// <PRE><BLOCKQUOTE>
///   GetParameterNamesResponse message - Annex A.3.2.3
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":GetParameterNamesResponse is a complexType.
///
/// struct _cwmp__GetParameterNamesResponse operations:
/// - _cwmp__GetParameterNamesResponse* soap_new__cwmp__GetParameterNamesResponse(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__GetParameterNamesResponse(struct soap*, _cwmp__GetParameterNamesResponse*) default initialize members
/// - int soap_read__cwmp__GetParameterNamesResponse(struct soap*, _cwmp__GetParameterNamesResponse*) deserialize from a source
/// - int soap_write__cwmp__GetParameterNamesResponse(struct soap*, _cwmp__GetParameterNamesResponse*) serialize to a sink
/// - _cwmp__GetParameterNamesResponse* soap_dup__cwmp__GetParameterNamesResponse(struct soap*, _cwmp__GetParameterNamesResponse* dst, _cwmp__GetParameterNamesResponse *src) returns deep copy of _cwmp__GetParameterNamesResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__GetParameterNamesResponse(_cwmp__GetParameterNamesResponse*) deep deletes _cwmp__GetParameterNamesResponse data members, use only on dst after soap_dup__cwmp__GetParameterNamesResponse(NULL, _cwmp__GetParameterNamesResponse *dst, _cwmp__GetParameterNamesResponse *src) (use soapcpp2 -Ed)
struct _cwmp__GetParameterNamesResponse
{
/// Element "ParameterList" of XSD type "urn:dslforum-org:cwmp-1-0":ParameterInfoList.
    struct ParameterInfoList*            ParameterList                  1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":SetParameterAttributes
/// <PRE><BLOCKQUOTE>
///   SetParameterAttributes message - Annex A.3.2.4
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":SetParameterAttributes is a complexType.
///
/// struct _cwmp__SetParameterAttributes operations:
/// - _cwmp__SetParameterAttributes* soap_new__cwmp__SetParameterAttributes(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__SetParameterAttributes(struct soap*, _cwmp__SetParameterAttributes*) default initialize members
/// - int soap_read__cwmp__SetParameterAttributes(struct soap*, _cwmp__SetParameterAttributes*) deserialize from a source
/// - int soap_write__cwmp__SetParameterAttributes(struct soap*, _cwmp__SetParameterAttributes*) serialize to a sink
/// - _cwmp__SetParameterAttributes* soap_dup__cwmp__SetParameterAttributes(struct soap*, _cwmp__SetParameterAttributes* dst, _cwmp__SetParameterAttributes *src) returns deep copy of _cwmp__SetParameterAttributes src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__SetParameterAttributes(_cwmp__SetParameterAttributes*) deep deletes _cwmp__SetParameterAttributes data members, use only on dst after soap_dup__cwmp__SetParameterAttributes(NULL, _cwmp__SetParameterAttributes *dst, _cwmp__SetParameterAttributes *src) (use soapcpp2 -Ed)
struct _cwmp__SetParameterAttributes
{
/// Element "ParameterList" of XSD type "urn:dslforum-org:cwmp-1-0":SetParameterAttributesList.
    struct SetParameterAttributesList*   ParameterList                  1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":SetParameterAttributesResponse
/// <PRE><BLOCKQUOTE>
///   SetParameterAttributesResponse message - Annex A.3.2.4
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":SetParameterAttributesResponse is a complexType.
///
/// struct _cwmp__SetParameterAttributesResponse operations:
/// - _cwmp__SetParameterAttributesResponse* soap_new__cwmp__SetParameterAttributesResponse(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__SetParameterAttributesResponse(struct soap*, _cwmp__SetParameterAttributesResponse*) default initialize members
/// - int soap_read__cwmp__SetParameterAttributesResponse(struct soap*, _cwmp__SetParameterAttributesResponse*) deserialize from a source
/// - int soap_write__cwmp__SetParameterAttributesResponse(struct soap*, _cwmp__SetParameterAttributesResponse*) serialize to a sink
/// - _cwmp__SetParameterAttributesResponse* soap_dup__cwmp__SetParameterAttributesResponse(struct soap*, _cwmp__SetParameterAttributesResponse* dst, _cwmp__SetParameterAttributesResponse *src) returns deep copy of _cwmp__SetParameterAttributesResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__SetParameterAttributesResponse(_cwmp__SetParameterAttributesResponse*) deep deletes _cwmp__SetParameterAttributesResponse data members, use only on dst after soap_dup__cwmp__SetParameterAttributesResponse(NULL, _cwmp__SetParameterAttributesResponse *dst, _cwmp__SetParameterAttributesResponse *src) (use soapcpp2 -Ed)
struct _cwmp__SetParameterAttributesResponse
{
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":GetParameterAttributes
/// <PRE><BLOCKQUOTE>
///   GetParameterAttributes message - Annex A.3.2.5
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":GetParameterAttributes is a complexType.
///
/// struct _cwmp__GetParameterAttributes operations:
/// - _cwmp__GetParameterAttributes* soap_new__cwmp__GetParameterAttributes(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__GetParameterAttributes(struct soap*, _cwmp__GetParameterAttributes*) default initialize members
/// - int soap_read__cwmp__GetParameterAttributes(struct soap*, _cwmp__GetParameterAttributes*) deserialize from a source
/// - int soap_write__cwmp__GetParameterAttributes(struct soap*, _cwmp__GetParameterAttributes*) serialize to a sink
/// - _cwmp__GetParameterAttributes* soap_dup__cwmp__GetParameterAttributes(struct soap*, _cwmp__GetParameterAttributes* dst, _cwmp__GetParameterAttributes *src) returns deep copy of _cwmp__GetParameterAttributes src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__GetParameterAttributes(_cwmp__GetParameterAttributes*) deep deletes _cwmp__GetParameterAttributes data members, use only on dst after soap_dup__cwmp__GetParameterAttributes(NULL, _cwmp__GetParameterAttributes *dst, _cwmp__GetParameterAttributes *src) (use soapcpp2 -Ed)
struct _cwmp__GetParameterAttributes
{
/// Element "ParameterNames" of XSD type "urn:dslforum-org:cwmp-1-0":ParameterNames.
    struct ParameterNames*               ParameterNames                 1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":GetParameterAttributesResponse
/// <PRE><BLOCKQUOTE>
///   GetParameterAttributesResponse message - Annex A.3.2.5
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":GetParameterAttributesResponse is a complexType.
///
/// struct _cwmp__GetParameterAttributesResponse operations:
/// - _cwmp__GetParameterAttributesResponse* soap_new__cwmp__GetParameterAttributesResponse(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__GetParameterAttributesResponse(struct soap*, _cwmp__GetParameterAttributesResponse*) default initialize members
/// - int soap_read__cwmp__GetParameterAttributesResponse(struct soap*, _cwmp__GetParameterAttributesResponse*) deserialize from a source
/// - int soap_write__cwmp__GetParameterAttributesResponse(struct soap*, _cwmp__GetParameterAttributesResponse*) serialize to a sink
/// - _cwmp__GetParameterAttributesResponse* soap_dup__cwmp__GetParameterAttributesResponse(struct soap*, _cwmp__GetParameterAttributesResponse* dst, _cwmp__GetParameterAttributesResponse *src) returns deep copy of _cwmp__GetParameterAttributesResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__GetParameterAttributesResponse(_cwmp__GetParameterAttributesResponse*) deep deletes _cwmp__GetParameterAttributesResponse data members, use only on dst after soap_dup__cwmp__GetParameterAttributesResponse(NULL, _cwmp__GetParameterAttributesResponse *dst, _cwmp__GetParameterAttributesResponse *src) (use soapcpp2 -Ed)
struct _cwmp__GetParameterAttributesResponse
{
/// Element "ParameterList" of XSD type "urn:dslforum-org:cwmp-1-0":ParameterAttributeList.
    struct ParameterAttributeList*       ParameterList                  1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":AddObject
/// <PRE><BLOCKQUOTE>
///   AddObject message - Annex A.3.2.6
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":AddObject is a complexType.
///
/// struct _cwmp__AddObject operations:
/// - _cwmp__AddObject* soap_new__cwmp__AddObject(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__AddObject(struct soap*, _cwmp__AddObject*) default initialize members
/// - int soap_read__cwmp__AddObject(struct soap*, _cwmp__AddObject*) deserialize from a source
/// - int soap_write__cwmp__AddObject(struct soap*, _cwmp__AddObject*) serialize to a sink
/// - _cwmp__AddObject* soap_dup__cwmp__AddObject(struct soap*, _cwmp__AddObject* dst, _cwmp__AddObject *src) returns deep copy of _cwmp__AddObject src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__AddObject(_cwmp__AddObject*) deep deletes _cwmp__AddObject data members, use only on dst after soap_dup__cwmp__AddObject(NULL, _cwmp__AddObject *dst, _cwmp__AddObject *src) (use soapcpp2 -Ed)
struct _cwmp__AddObject
{
/// Element "ObjectName" of XSD type "urn:dslforum-org:cwmp-1-0":ObjectNameType.
    cwmp__ObjectNameType                 ObjectName                     1;	///< Required element.
/// Element "ParameterKey" of XSD type "urn:dslforum-org:cwmp-1-0":ParameterKeyType.
    cwmp__ParameterKeyType               ParameterKey                   1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":AddObjectResponse
/// <PRE><BLOCKQUOTE>
///   AddObjectResponse message - Annex A.3.2.6
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":AddObjectResponse is a complexType.
///
/// struct _cwmp__AddObjectResponse operations:
/// - _cwmp__AddObjectResponse* soap_new__cwmp__AddObjectResponse(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__AddObjectResponse(struct soap*, _cwmp__AddObjectResponse*) default initialize members
/// - int soap_read__cwmp__AddObjectResponse(struct soap*, _cwmp__AddObjectResponse*) deserialize from a source
/// - int soap_write__cwmp__AddObjectResponse(struct soap*, _cwmp__AddObjectResponse*) serialize to a sink
/// - _cwmp__AddObjectResponse* soap_dup__cwmp__AddObjectResponse(struct soap*, _cwmp__AddObjectResponse* dst, _cwmp__AddObjectResponse *src) returns deep copy of _cwmp__AddObjectResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__AddObjectResponse(_cwmp__AddObjectResponse*) deep deletes _cwmp__AddObjectResponse data members, use only on dst after soap_dup__cwmp__AddObjectResponse(NULL, _cwmp__AddObjectResponse *dst, _cwmp__AddObjectResponse *src) (use soapcpp2 -Ed)
struct _cwmp__AddObjectResponse
{
/// Value range is 1 to highest.
    unsigned int                                                       
                                         InstanceNumber                 1;	///< Required element.
    enum _cwmp__AddObjectResponse_Status
    {
/// <PRE><BLOCKQUOTE>
///   The object has been created
/// </BLOCKQUOTE></PRE>
	_cwmp__AddObjectResponse_Status__0 = 0,	///< xs:int value="0"
/// <PRE><BLOCKQUOTE>
///   The object creation has been validated and committed, but not yet applied
/// </BLOCKQUOTE></PRE>
	_cwmp__AddObjectResponse_Status__1 = 1,	///< xs:int value="1"
    }
                                         Status                         1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":DeleteObject
/// <PRE><BLOCKQUOTE>
///   DeleteObject message - Annex A.3.2.7
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":DeleteObject is a complexType.
///
/// struct _cwmp__DeleteObject operations:
/// - _cwmp__DeleteObject* soap_new__cwmp__DeleteObject(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__DeleteObject(struct soap*, _cwmp__DeleteObject*) default initialize members
/// - int soap_read__cwmp__DeleteObject(struct soap*, _cwmp__DeleteObject*) deserialize from a source
/// - int soap_write__cwmp__DeleteObject(struct soap*, _cwmp__DeleteObject*) serialize to a sink
/// - _cwmp__DeleteObject* soap_dup__cwmp__DeleteObject(struct soap*, _cwmp__DeleteObject* dst, _cwmp__DeleteObject *src) returns deep copy of _cwmp__DeleteObject src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__DeleteObject(_cwmp__DeleteObject*) deep deletes _cwmp__DeleteObject data members, use only on dst after soap_dup__cwmp__DeleteObject(NULL, _cwmp__DeleteObject *dst, _cwmp__DeleteObject *src) (use soapcpp2 -Ed)
struct _cwmp__DeleteObject
{
/// Element "ObjectName" of XSD type "urn:dslforum-org:cwmp-1-0":ObjectNameType.
    cwmp__ObjectNameType                 ObjectName                     1;	///< Required element.
/// Element "ParameterKey" of XSD type "urn:dslforum-org:cwmp-1-0":ParameterKeyType.
    cwmp__ParameterKeyType               ParameterKey                   1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":DeleteObjectResponse
/// <PRE><BLOCKQUOTE>
///   DeleteObjectResponse message - Annex A.3.2.7
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":DeleteObjectResponse is a complexType.
///
/// struct _cwmp__DeleteObjectResponse operations:
/// - _cwmp__DeleteObjectResponse* soap_new__cwmp__DeleteObjectResponse(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__DeleteObjectResponse(struct soap*, _cwmp__DeleteObjectResponse*) default initialize members
/// - int soap_read__cwmp__DeleteObjectResponse(struct soap*, _cwmp__DeleteObjectResponse*) deserialize from a source
/// - int soap_write__cwmp__DeleteObjectResponse(struct soap*, _cwmp__DeleteObjectResponse*) serialize to a sink
/// - _cwmp__DeleteObjectResponse* soap_dup__cwmp__DeleteObjectResponse(struct soap*, _cwmp__DeleteObjectResponse* dst, _cwmp__DeleteObjectResponse *src) returns deep copy of _cwmp__DeleteObjectResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__DeleteObjectResponse(_cwmp__DeleteObjectResponse*) deep deletes _cwmp__DeleteObjectResponse data members, use only on dst after soap_dup__cwmp__DeleteObjectResponse(NULL, _cwmp__DeleteObjectResponse *dst, _cwmp__DeleteObjectResponse *src) (use soapcpp2 -Ed)
struct _cwmp__DeleteObjectResponse
{
    enum _cwmp__DeleteObjectResponse_Status
    {
/// <PRE><BLOCKQUOTE>
///   The object has been deleted
/// </BLOCKQUOTE></PRE>
	_cwmp__DeleteObjectResponse_Status__0 = 0,	///< xs:int value="0"
/// <PRE><BLOCKQUOTE>
///   The object deletion has been validated and committed, but not yet applied
/// </BLOCKQUOTE></PRE>
	_cwmp__DeleteObjectResponse_Status__1 = 1,	///< xs:int value="1"
    }
                                         Status                         1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":Download
/// <PRE><BLOCKQUOTE>
///   Download message - Annex A.3.2.8
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":Download is a complexType.
///
/// struct _cwmp__Download operations:
/// - _cwmp__Download* soap_new__cwmp__Download(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__Download(struct soap*, _cwmp__Download*) default initialize members
/// - int soap_read__cwmp__Download(struct soap*, _cwmp__Download*) deserialize from a source
/// - int soap_write__cwmp__Download(struct soap*, _cwmp__Download*) serialize to a sink
/// - _cwmp__Download* soap_dup__cwmp__Download(struct soap*, _cwmp__Download* dst, _cwmp__Download *src) returns deep copy of _cwmp__Download src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__Download(_cwmp__Download*) deep deletes _cwmp__Download data members, use only on dst after soap_dup__cwmp__Download(NULL, _cwmp__Download *dst, _cwmp__Download *src) (use soapcpp2 -Ed)
struct _cwmp__Download
{
/// Element "CommandKey" of XSD type "urn:dslforum-org:cwmp-1-0":CommandKeyType.
    cwmp__CommandKeyType                 CommandKey                     1;	///< Required element.
/// Length of this string is 0 to 64.
/// Content pattern is "1 Firmware Upgrade Image".
/// Content pattern is "2 Web Content".
/// Content pattern is "3 Vendor Configuration File".
/// Content pattern is "X [0-9A-F]{6} .*".
    char*                                                              
                                         FileType                       1;	///< Required element.
/// Length of this string is 0 to 256.
    char*                                                              
                                         URL                            1;	///< Required element.
/// Length of this string is 0 to 256.
    char*                                                              
                                         Username                       1;	///< Required element.
/// Length of this string is 0 to 256.
    char*                                                              
                                         Password                       1;	///< Required element.
/// Element "FileSize" of XSD type xs:unsignedInt.
    unsigned int                         FileSize                       1;	///< Required element.
/// Length of this string is 0 to 256.
    char*                                                              
                                         TargetFileName                 1;	///< Required element.
/// Element "DelaySeconds" of XSD type xs:unsignedInt.
    unsigned int                         DelaySeconds                   1;	///< Required element.
/// Length of this string is 0 to 256.
    char*                                                              
                                         SuccessURL                     1;	///< Required element.
/// Length of this string is 0 to 256.
    char*                                                              
                                         FailureURL                     1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":DownloadResponse
/// <PRE><BLOCKQUOTE>
///   DownloadResponse message - Annex A.3.2.8
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":DownloadResponse is a complexType.
///
/// struct _cwmp__DownloadResponse operations:
/// - _cwmp__DownloadResponse* soap_new__cwmp__DownloadResponse(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__DownloadResponse(struct soap*, _cwmp__DownloadResponse*) default initialize members
/// - int soap_read__cwmp__DownloadResponse(struct soap*, _cwmp__DownloadResponse*) deserialize from a source
/// - int soap_write__cwmp__DownloadResponse(struct soap*, _cwmp__DownloadResponse*) serialize to a sink
/// - _cwmp__DownloadResponse* soap_dup__cwmp__DownloadResponse(struct soap*, _cwmp__DownloadResponse* dst, _cwmp__DownloadResponse *src) returns deep copy of _cwmp__DownloadResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__DownloadResponse(_cwmp__DownloadResponse*) deep deletes _cwmp__DownloadResponse data members, use only on dst after soap_dup__cwmp__DownloadResponse(NULL, _cwmp__DownloadResponse *dst, _cwmp__DownloadResponse *src) (use soapcpp2 -Ed)
struct _cwmp__DownloadResponse
{
    enum _cwmp__DownloadResponse_Status
    {
/// <PRE><BLOCKQUOTE>
///   Download has completed and been applied
/// </BLOCKQUOTE></PRE>
	_cwmp__DownloadResponse_Status__0 = 0,	///< xs:int value="0"
/// <PRE><BLOCKQUOTE>
///   Download has not yet been completed and applied
/// </BLOCKQUOTE></PRE>
	_cwmp__DownloadResponse_Status__1 = 1,	///< xs:int value="1"
    }
                                         Status                         1;	///< Required element.
/// Element "StartTime" of XSD type xs:dateTime.
    time_t                               StartTime                      1;	///< Required element.
/// Element "CompleteTime" of XSD type xs:dateTime.
    time_t                               CompleteTime                   1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":Reboot
/// <PRE><BLOCKQUOTE>
///   Reboot message - Annex A.3.2.9
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":Reboot is a complexType.
///
/// struct _cwmp__Reboot operations:
/// - _cwmp__Reboot* soap_new__cwmp__Reboot(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__Reboot(struct soap*, _cwmp__Reboot*) default initialize members
/// - int soap_read__cwmp__Reboot(struct soap*, _cwmp__Reboot*) deserialize from a source
/// - int soap_write__cwmp__Reboot(struct soap*, _cwmp__Reboot*) serialize to a sink
/// - _cwmp__Reboot* soap_dup__cwmp__Reboot(struct soap*, _cwmp__Reboot* dst, _cwmp__Reboot *src) returns deep copy of _cwmp__Reboot src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__Reboot(_cwmp__Reboot*) deep deletes _cwmp__Reboot data members, use only on dst after soap_dup__cwmp__Reboot(NULL, _cwmp__Reboot *dst, _cwmp__Reboot *src) (use soapcpp2 -Ed)
struct _cwmp__Reboot
{
/// Element "CommandKey" of XSD type "urn:dslforum-org:cwmp-1-0":CommandKeyType.
    cwmp__CommandKeyType                 CommandKey                     1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":RebootResponse
/// <PRE><BLOCKQUOTE>
///   RebootResponse message - Annex A.3.2.9
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":RebootResponse is a complexType.
///
/// struct _cwmp__RebootResponse operations:
/// - _cwmp__RebootResponse* soap_new__cwmp__RebootResponse(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__RebootResponse(struct soap*, _cwmp__RebootResponse*) default initialize members
/// - int soap_read__cwmp__RebootResponse(struct soap*, _cwmp__RebootResponse*) deserialize from a source
/// - int soap_write__cwmp__RebootResponse(struct soap*, _cwmp__RebootResponse*) serialize to a sink
/// - _cwmp__RebootResponse* soap_dup__cwmp__RebootResponse(struct soap*, _cwmp__RebootResponse* dst, _cwmp__RebootResponse *src) returns deep copy of _cwmp__RebootResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__RebootResponse(_cwmp__RebootResponse*) deep deletes _cwmp__RebootResponse data members, use only on dst after soap_dup__cwmp__RebootResponse(NULL, _cwmp__RebootResponse *dst, _cwmp__RebootResponse *src) (use soapcpp2 -Ed)
struct _cwmp__RebootResponse
{
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":GetQueuedTransfers
/// <PRE><BLOCKQUOTE>
///   GetQueuedTransfers message - Annex A.4.1.1
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":GetQueuedTransfers is a complexType.
///
/// struct _cwmp__GetQueuedTransfers operations:
/// - _cwmp__GetQueuedTransfers* soap_new__cwmp__GetQueuedTransfers(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__GetQueuedTransfers(struct soap*, _cwmp__GetQueuedTransfers*) default initialize members
/// - int soap_read__cwmp__GetQueuedTransfers(struct soap*, _cwmp__GetQueuedTransfers*) deserialize from a source
/// - int soap_write__cwmp__GetQueuedTransfers(struct soap*, _cwmp__GetQueuedTransfers*) serialize to a sink
/// - _cwmp__GetQueuedTransfers* soap_dup__cwmp__GetQueuedTransfers(struct soap*, _cwmp__GetQueuedTransfers* dst, _cwmp__GetQueuedTransfers *src) returns deep copy of _cwmp__GetQueuedTransfers src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__GetQueuedTransfers(_cwmp__GetQueuedTransfers*) deep deletes _cwmp__GetQueuedTransfers data members, use only on dst after soap_dup__cwmp__GetQueuedTransfers(NULL, _cwmp__GetQueuedTransfers *dst, _cwmp__GetQueuedTransfers *src) (use soapcpp2 -Ed)
struct _cwmp__GetQueuedTransfers
{
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":GetQueuedTransfersResponse
/// <PRE><BLOCKQUOTE>
///   GetQueuedTransfersResponse message - Annex A.4.1.1
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":GetQueuedTransfersResponse is a complexType.
///
/// struct _cwmp__GetQueuedTransfersResponse operations:
/// - _cwmp__GetQueuedTransfersResponse* soap_new__cwmp__GetQueuedTransfersResponse(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__GetQueuedTransfersResponse(struct soap*, _cwmp__GetQueuedTransfersResponse*) default initialize members
/// - int soap_read__cwmp__GetQueuedTransfersResponse(struct soap*, _cwmp__GetQueuedTransfersResponse*) deserialize from a source
/// - int soap_write__cwmp__GetQueuedTransfersResponse(struct soap*, _cwmp__GetQueuedTransfersResponse*) serialize to a sink
/// - _cwmp__GetQueuedTransfersResponse* soap_dup__cwmp__GetQueuedTransfersResponse(struct soap*, _cwmp__GetQueuedTransfersResponse* dst, _cwmp__GetQueuedTransfersResponse *src) returns deep copy of _cwmp__GetQueuedTransfersResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__GetQueuedTransfersResponse(_cwmp__GetQueuedTransfersResponse*) deep deletes _cwmp__GetQueuedTransfersResponse data members, use only on dst after soap_dup__cwmp__GetQueuedTransfersResponse(NULL, _cwmp__GetQueuedTransfersResponse *dst, _cwmp__GetQueuedTransfersResponse *src) (use soapcpp2 -Ed)
struct _cwmp__GetQueuedTransfersResponse
{
/// Element "TransferList" of XSD type "urn:dslforum-org:cwmp-1-0":TransferList.
    struct TransferList*                 TransferList                   1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":ScheduleInform
/// <PRE><BLOCKQUOTE>
///   ScheduleInform message - Annex A.4.1.2
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":ScheduleInform is a complexType.
///
/// struct _cwmp__ScheduleInform operations:
/// - _cwmp__ScheduleInform* soap_new__cwmp__ScheduleInform(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__ScheduleInform(struct soap*, _cwmp__ScheduleInform*) default initialize members
/// - int soap_read__cwmp__ScheduleInform(struct soap*, _cwmp__ScheduleInform*) deserialize from a source
/// - int soap_write__cwmp__ScheduleInform(struct soap*, _cwmp__ScheduleInform*) serialize to a sink
/// - _cwmp__ScheduleInform* soap_dup__cwmp__ScheduleInform(struct soap*, _cwmp__ScheduleInform* dst, _cwmp__ScheduleInform *src) returns deep copy of _cwmp__ScheduleInform src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__ScheduleInform(_cwmp__ScheduleInform*) deep deletes _cwmp__ScheduleInform data members, use only on dst after soap_dup__cwmp__ScheduleInform(NULL, _cwmp__ScheduleInform *dst, _cwmp__ScheduleInform *src) (use soapcpp2 -Ed)
struct _cwmp__ScheduleInform
{
/// Element "DelaySeconds" of XSD type xs:unsignedInt.
    unsigned int                         DelaySeconds                   1;	///< Required element.
/// Element "CommandKey" of XSD type "urn:dslforum-org:cwmp-1-0":CommandKeyType.
    cwmp__CommandKeyType                 CommandKey                     1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":ScheduleInformResponse
/// <PRE><BLOCKQUOTE>
///   ScheduleInformResponse message - Annex A.4.1.2
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":ScheduleInformResponse is a complexType.
///
/// struct _cwmp__ScheduleInformResponse operations:
/// - _cwmp__ScheduleInformResponse* soap_new__cwmp__ScheduleInformResponse(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__ScheduleInformResponse(struct soap*, _cwmp__ScheduleInformResponse*) default initialize members
/// - int soap_read__cwmp__ScheduleInformResponse(struct soap*, _cwmp__ScheduleInformResponse*) deserialize from a source
/// - int soap_write__cwmp__ScheduleInformResponse(struct soap*, _cwmp__ScheduleInformResponse*) serialize to a sink
/// - _cwmp__ScheduleInformResponse* soap_dup__cwmp__ScheduleInformResponse(struct soap*, _cwmp__ScheduleInformResponse* dst, _cwmp__ScheduleInformResponse *src) returns deep copy of _cwmp__ScheduleInformResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__ScheduleInformResponse(_cwmp__ScheduleInformResponse*) deep deletes _cwmp__ScheduleInformResponse data members, use only on dst after soap_dup__cwmp__ScheduleInformResponse(NULL, _cwmp__ScheduleInformResponse *dst, _cwmp__ScheduleInformResponse *src) (use soapcpp2 -Ed)
struct _cwmp__ScheduleInformResponse
{
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":SetVouchers
/// <PRE><BLOCKQUOTE>
///   SetVouchers message - Annex A.4.1.3
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":SetVouchers is a complexType.
///
/// struct _cwmp__SetVouchers operations:
/// - _cwmp__SetVouchers* soap_new__cwmp__SetVouchers(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__SetVouchers(struct soap*, _cwmp__SetVouchers*) default initialize members
/// - int soap_read__cwmp__SetVouchers(struct soap*, _cwmp__SetVouchers*) deserialize from a source
/// - int soap_write__cwmp__SetVouchers(struct soap*, _cwmp__SetVouchers*) serialize to a sink
/// - _cwmp__SetVouchers* soap_dup__cwmp__SetVouchers(struct soap*, _cwmp__SetVouchers* dst, _cwmp__SetVouchers *src) returns deep copy of _cwmp__SetVouchers src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__SetVouchers(_cwmp__SetVouchers*) deep deletes _cwmp__SetVouchers data members, use only on dst after soap_dup__cwmp__SetVouchers(NULL, _cwmp__SetVouchers *dst, _cwmp__SetVouchers *src) (use soapcpp2 -Ed)
struct _cwmp__SetVouchers
{
/// Element "VoucherList" of XSD type "urn:dslforum-org:cwmp-1-0":VoucherList.
    struct VoucherList*                  VoucherList                    1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":SetVouchersResponse
/// <PRE><BLOCKQUOTE>
///   SetVouchersResponse message - Annex A.4.1.3
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":SetVouchersResponse is a complexType.
///
/// struct _cwmp__SetVouchersResponse operations:
/// - _cwmp__SetVouchersResponse* soap_new__cwmp__SetVouchersResponse(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__SetVouchersResponse(struct soap*, _cwmp__SetVouchersResponse*) default initialize members
/// - int soap_read__cwmp__SetVouchersResponse(struct soap*, _cwmp__SetVouchersResponse*) deserialize from a source
/// - int soap_write__cwmp__SetVouchersResponse(struct soap*, _cwmp__SetVouchersResponse*) serialize to a sink
/// - _cwmp__SetVouchersResponse* soap_dup__cwmp__SetVouchersResponse(struct soap*, _cwmp__SetVouchersResponse* dst, _cwmp__SetVouchersResponse *src) returns deep copy of _cwmp__SetVouchersResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__SetVouchersResponse(_cwmp__SetVouchersResponse*) deep deletes _cwmp__SetVouchersResponse data members, use only on dst after soap_dup__cwmp__SetVouchersResponse(NULL, _cwmp__SetVouchersResponse *dst, _cwmp__SetVouchersResponse *src) (use soapcpp2 -Ed)
struct _cwmp__SetVouchersResponse
{
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":GetOptions
/// <PRE><BLOCKQUOTE>
///   GetOptions message - Annex A.4.1.4
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":GetOptions is a complexType.
///
/// struct _cwmp__GetOptions operations:
/// - _cwmp__GetOptions* soap_new__cwmp__GetOptions(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__GetOptions(struct soap*, _cwmp__GetOptions*) default initialize members
/// - int soap_read__cwmp__GetOptions(struct soap*, _cwmp__GetOptions*) deserialize from a source
/// - int soap_write__cwmp__GetOptions(struct soap*, _cwmp__GetOptions*) serialize to a sink
/// - _cwmp__GetOptions* soap_dup__cwmp__GetOptions(struct soap*, _cwmp__GetOptions* dst, _cwmp__GetOptions *src) returns deep copy of _cwmp__GetOptions src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__GetOptions(_cwmp__GetOptions*) deep deletes _cwmp__GetOptions data members, use only on dst after soap_dup__cwmp__GetOptions(NULL, _cwmp__GetOptions *dst, _cwmp__GetOptions *src) (use soapcpp2 -Ed)
struct _cwmp__GetOptions
{
/// Length of this string is 0 to 64.
    char*                                                              
                                         OptionName                     1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":GetOptionsResponse
/// <PRE><BLOCKQUOTE>
///   GetOptionsResponse message - Annex A.4.1.4
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":GetOptionsResponse is a complexType.
///
/// struct _cwmp__GetOptionsResponse operations:
/// - _cwmp__GetOptionsResponse* soap_new__cwmp__GetOptionsResponse(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__GetOptionsResponse(struct soap*, _cwmp__GetOptionsResponse*) default initialize members
/// - int soap_read__cwmp__GetOptionsResponse(struct soap*, _cwmp__GetOptionsResponse*) deserialize from a source
/// - int soap_write__cwmp__GetOptionsResponse(struct soap*, _cwmp__GetOptionsResponse*) serialize to a sink
/// - _cwmp__GetOptionsResponse* soap_dup__cwmp__GetOptionsResponse(struct soap*, _cwmp__GetOptionsResponse* dst, _cwmp__GetOptionsResponse *src) returns deep copy of _cwmp__GetOptionsResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__GetOptionsResponse(_cwmp__GetOptionsResponse*) deep deletes _cwmp__GetOptionsResponse data members, use only on dst after soap_dup__cwmp__GetOptionsResponse(NULL, _cwmp__GetOptionsResponse *dst, _cwmp__GetOptionsResponse *src) (use soapcpp2 -Ed)
struct _cwmp__GetOptionsResponse
{
/// Element "OptionList" of XSD type "urn:dslforum-org:cwmp-1-0":OptionList.
    struct OptionList*                   OptionList                     1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":Upload
/// <PRE><BLOCKQUOTE>
///   Upload message - Annex A.4.1.5
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":Upload is a complexType.
///
/// struct _cwmp__Upload operations:
/// - _cwmp__Upload* soap_new__cwmp__Upload(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__Upload(struct soap*, _cwmp__Upload*) default initialize members
/// - int soap_read__cwmp__Upload(struct soap*, _cwmp__Upload*) deserialize from a source
/// - int soap_write__cwmp__Upload(struct soap*, _cwmp__Upload*) serialize to a sink
/// - _cwmp__Upload* soap_dup__cwmp__Upload(struct soap*, _cwmp__Upload* dst, _cwmp__Upload *src) returns deep copy of _cwmp__Upload src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__Upload(_cwmp__Upload*) deep deletes _cwmp__Upload data members, use only on dst after soap_dup__cwmp__Upload(NULL, _cwmp__Upload *dst, _cwmp__Upload *src) (use soapcpp2 -Ed)
struct _cwmp__Upload
{
/// Element "CommandKey" of XSD type "urn:dslforum-org:cwmp-1-0":CommandKeyType.
    cwmp__CommandKeyType                 CommandKey                     1;	///< Required element.
/// Length of this string is 0 to 64.
/// Content pattern is "1 Vendor Configuration File".
/// Content pattern is "2 Vendor Log File".
/// Content pattern is "X [0-9A-F]{6} .*".
    char*                                                              
                                         FileType                       1;	///< Required element.
/// Length of this string is 0 to 256.
    char*                                                              
                                         URL                            1;	///< Required element.
/// Length of this string is 0 to 256.
    char*                                                              
                                         Username                       1;	///< Required element.
/// Length of this string is 0 to 256.
    char*                                                              
                                         Password                       1;	///< Required element.
/// Element "DelaySeconds" of XSD type xs:unsignedInt.
    unsigned int                         DelaySeconds                   1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":UploadResponse
/// <PRE><BLOCKQUOTE>
///   UploadResponse message - Annex A.4.1.5
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":UploadResponse is a complexType.
///
/// struct _cwmp__UploadResponse operations:
/// - _cwmp__UploadResponse* soap_new__cwmp__UploadResponse(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__UploadResponse(struct soap*, _cwmp__UploadResponse*) default initialize members
/// - int soap_read__cwmp__UploadResponse(struct soap*, _cwmp__UploadResponse*) deserialize from a source
/// - int soap_write__cwmp__UploadResponse(struct soap*, _cwmp__UploadResponse*) serialize to a sink
/// - _cwmp__UploadResponse* soap_dup__cwmp__UploadResponse(struct soap*, _cwmp__UploadResponse* dst, _cwmp__UploadResponse *src) returns deep copy of _cwmp__UploadResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__UploadResponse(_cwmp__UploadResponse*) deep deletes _cwmp__UploadResponse data members, use only on dst after soap_dup__cwmp__UploadResponse(NULL, _cwmp__UploadResponse *dst, _cwmp__UploadResponse *src) (use soapcpp2 -Ed)
struct _cwmp__UploadResponse
{
    enum _cwmp__UploadResponse_Status
    {
/// <PRE><BLOCKQUOTE>
///   Upload has been completed
/// </BLOCKQUOTE></PRE>
	_cwmp__UploadResponse_Status__0 = 0,	///< xs:int value="0"
/// <PRE><BLOCKQUOTE>
///   Upload has not yet completed
/// </BLOCKQUOTE></PRE>
	_cwmp__UploadResponse_Status__1 = 1,	///< xs:int value="1"
    }
                                         Status                         1;	///< Required element.
/// Element "StartTime" of XSD type xs:dateTime.
    time_t                               StartTime                      1;	///< Required element.
/// Element "CompleteTime" of XSD type xs:dateTime.
    time_t                               CompleteTime                   1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":FactoryReset
/// <PRE><BLOCKQUOTE>
///   FactoryReset message - Annex A.4.1.6
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":FactoryReset is a complexType.
///
/// struct _cwmp__FactoryReset operations:
/// - _cwmp__FactoryReset* soap_new__cwmp__FactoryReset(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__FactoryReset(struct soap*, _cwmp__FactoryReset*) default initialize members
/// - int soap_read__cwmp__FactoryReset(struct soap*, _cwmp__FactoryReset*) deserialize from a source
/// - int soap_write__cwmp__FactoryReset(struct soap*, _cwmp__FactoryReset*) serialize to a sink
/// - _cwmp__FactoryReset* soap_dup__cwmp__FactoryReset(struct soap*, _cwmp__FactoryReset* dst, _cwmp__FactoryReset *src) returns deep copy of _cwmp__FactoryReset src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__FactoryReset(_cwmp__FactoryReset*) deep deletes _cwmp__FactoryReset data members, use only on dst after soap_dup__cwmp__FactoryReset(NULL, _cwmp__FactoryReset *dst, _cwmp__FactoryReset *src) (use soapcpp2 -Ed)
struct _cwmp__FactoryReset
{
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":FactoryResetResponse
/// <PRE><BLOCKQUOTE>
///   FactoryResetResponse message - Annex A.4.1.6
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":FactoryResetResponse is a complexType.
///
/// struct _cwmp__FactoryResetResponse operations:
/// - _cwmp__FactoryResetResponse* soap_new__cwmp__FactoryResetResponse(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__FactoryResetResponse(struct soap*, _cwmp__FactoryResetResponse*) default initialize members
/// - int soap_read__cwmp__FactoryResetResponse(struct soap*, _cwmp__FactoryResetResponse*) deserialize from a source
/// - int soap_write__cwmp__FactoryResetResponse(struct soap*, _cwmp__FactoryResetResponse*) serialize to a sink
/// - _cwmp__FactoryResetResponse* soap_dup__cwmp__FactoryResetResponse(struct soap*, _cwmp__FactoryResetResponse* dst, _cwmp__FactoryResetResponse *src) returns deep copy of _cwmp__FactoryResetResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__FactoryResetResponse(_cwmp__FactoryResetResponse*) deep deletes _cwmp__FactoryResetResponse data members, use only on dst after soap_dup__cwmp__FactoryResetResponse(NULL, _cwmp__FactoryResetResponse *dst, _cwmp__FactoryResetResponse *src) (use soapcpp2 -Ed)
struct _cwmp__FactoryResetResponse
{
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":Inform
/// <PRE><BLOCKQUOTE>
///   Inform message - Annex A.3.3.1
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":Inform is a complexType.
///
/// struct _cwmp__Inform operations:
/// - _cwmp__Inform* soap_new__cwmp__Inform(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__Inform(struct soap*, _cwmp__Inform*) default initialize members
/// - int soap_read__cwmp__Inform(struct soap*, _cwmp__Inform*) deserialize from a source
/// - int soap_write__cwmp__Inform(struct soap*, _cwmp__Inform*) serialize to a sink
/// - _cwmp__Inform* soap_dup__cwmp__Inform(struct soap*, _cwmp__Inform* dst, _cwmp__Inform *src) returns deep copy of _cwmp__Inform src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__Inform(_cwmp__Inform*) deep deletes _cwmp__Inform data members, use only on dst after soap_dup__cwmp__Inform(NULL, _cwmp__Inform *dst, _cwmp__Inform *src) (use soapcpp2 -Ed)
struct _cwmp__Inform
{
/// Element "DeviceId" of XSD type "urn:dslforum-org:cwmp-1-0":DeviceIdStruct.
    struct cwmp__DeviceIdStruct*         DeviceId                       1;	///< Required element.
/// Element "Event" of XSD type "urn:dslforum-org:cwmp-1-0":EventList.
    struct EventList*                    Event                          1;	///< Required element.
/// Element "MaxEnvelopes" of XSD type xs:unsignedInt.
    unsigned int                         MaxEnvelopes                   1;	///< Required element.
/// Element "CurrentTime" of XSD type xs:dateTime.
    time_t                               CurrentTime                    1;	///< Required element.
/// Element "RetryCount" of XSD type xs:unsignedInt.
    unsigned int                         RetryCount                     1;	///< Required element.
/// Element "ParameterList" of XSD type "urn:dslforum-org:cwmp-1-0":ParameterValueList.
    struct ParameterValueList*           ParameterList                  1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":InformResponse
/// <PRE><BLOCKQUOTE>
///   InformResponse message - Annex A.3.3.1
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":InformResponse is a complexType.
///
/// struct _cwmp__InformResponse operations:
/// - _cwmp__InformResponse* soap_new__cwmp__InformResponse(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__InformResponse(struct soap*, _cwmp__InformResponse*) default initialize members
/// - int soap_read__cwmp__InformResponse(struct soap*, _cwmp__InformResponse*) deserialize from a source
/// - int soap_write__cwmp__InformResponse(struct soap*, _cwmp__InformResponse*) serialize to a sink
/// - _cwmp__InformResponse* soap_dup__cwmp__InformResponse(struct soap*, _cwmp__InformResponse* dst, _cwmp__InformResponse *src) returns deep copy of _cwmp__InformResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__InformResponse(_cwmp__InformResponse*) deep deletes _cwmp__InformResponse data members, use only on dst after soap_dup__cwmp__InformResponse(NULL, _cwmp__InformResponse *dst, _cwmp__InformResponse *src) (use soapcpp2 -Ed)
struct _cwmp__InformResponse
{
/// Element "MaxEnvelopes" of XSD type xs:unsignedInt.
    unsigned int                         MaxEnvelopes                   1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":TransferComplete
/// <PRE><BLOCKQUOTE>
///   TransferComplete message - Annex A.3.3.2
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":TransferComplete is a complexType.
///
/// struct _cwmp__TransferComplete operations:
/// - _cwmp__TransferComplete* soap_new__cwmp__TransferComplete(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__TransferComplete(struct soap*, _cwmp__TransferComplete*) default initialize members
/// - int soap_read__cwmp__TransferComplete(struct soap*, _cwmp__TransferComplete*) deserialize from a source
/// - int soap_write__cwmp__TransferComplete(struct soap*, _cwmp__TransferComplete*) serialize to a sink
/// - _cwmp__TransferComplete* soap_dup__cwmp__TransferComplete(struct soap*, _cwmp__TransferComplete* dst, _cwmp__TransferComplete *src) returns deep copy of _cwmp__TransferComplete src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__TransferComplete(_cwmp__TransferComplete*) deep deletes _cwmp__TransferComplete data members, use only on dst after soap_dup__cwmp__TransferComplete(NULL, _cwmp__TransferComplete *dst, _cwmp__TransferComplete *src) (use soapcpp2 -Ed)
struct _cwmp__TransferComplete
{
/// Element "CommandKey" of XSD type "urn:dslforum-org:cwmp-1-0":CommandKeyType.
    cwmp__CommandKeyType                 CommandKey                     1;	///< Required element.
/// Element "FaultStruct" of XSD type "urn:dslforum-org:cwmp-1-0":FaultStruct.
    struct cwmp__FaultStruct*            FaultStruct                    1;	///< Required element.
/// Element "StartTime" of XSD type xs:dateTime.
    time_t                               StartTime                      1;	///< Required element.
/// Element "CompleteTime" of XSD type xs:dateTime.
    time_t                               CompleteTime                   1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":TransferCompleteResponse
/// <PRE><BLOCKQUOTE>
///   TransferCompleteResponse message - Annex A.3.3.2
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":TransferCompleteResponse is a complexType.
///
/// struct _cwmp__TransferCompleteResponse operations:
/// - _cwmp__TransferCompleteResponse* soap_new__cwmp__TransferCompleteResponse(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__TransferCompleteResponse(struct soap*, _cwmp__TransferCompleteResponse*) default initialize members
/// - int soap_read__cwmp__TransferCompleteResponse(struct soap*, _cwmp__TransferCompleteResponse*) deserialize from a source
/// - int soap_write__cwmp__TransferCompleteResponse(struct soap*, _cwmp__TransferCompleteResponse*) serialize to a sink
/// - _cwmp__TransferCompleteResponse* soap_dup__cwmp__TransferCompleteResponse(struct soap*, _cwmp__TransferCompleteResponse* dst, _cwmp__TransferCompleteResponse *src) returns deep copy of _cwmp__TransferCompleteResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__TransferCompleteResponse(_cwmp__TransferCompleteResponse*) deep deletes _cwmp__TransferCompleteResponse data members, use only on dst after soap_dup__cwmp__TransferCompleteResponse(NULL, _cwmp__TransferCompleteResponse *dst, _cwmp__TransferCompleteResponse *src) (use soapcpp2 -Ed)
struct _cwmp__TransferCompleteResponse
{
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":Kicked
/// <PRE><BLOCKQUOTE>
///   Kicked message - Annex A.4.2.1
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":Kicked is a complexType.
///
/// struct _cwmp__Kicked operations:
/// - _cwmp__Kicked* soap_new__cwmp__Kicked(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__Kicked(struct soap*, _cwmp__Kicked*) default initialize members
/// - int soap_read__cwmp__Kicked(struct soap*, _cwmp__Kicked*) deserialize from a source
/// - int soap_write__cwmp__Kicked(struct soap*, _cwmp__Kicked*) serialize to a sink
/// - _cwmp__Kicked* soap_dup__cwmp__Kicked(struct soap*, _cwmp__Kicked* dst, _cwmp__Kicked *src) returns deep copy of _cwmp__Kicked src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__Kicked(_cwmp__Kicked*) deep deletes _cwmp__Kicked data members, use only on dst after soap_dup__cwmp__Kicked(NULL, _cwmp__Kicked *dst, _cwmp__Kicked *src) (use soapcpp2 -Ed)
struct _cwmp__Kicked
{
/// Length of this string is 0 to 32.
    char*                                                              
                                         Command                        1;	///< Required element.
/// Length of this string is 0 to 64.
    char*                                                              
                                         Referer                        1;	///< Required element.
/// Length of this string is 0 to 256.
    char*                                                              
                                         Arg                            1;	///< Required element.
/// Length of this string is 0 to 1024.
    char*                                                              
                                         Next                           1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":KickedResponse
/// <PRE><BLOCKQUOTE>
///   KickedResponse message - Annex A.4.2.1
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":KickedResponse is a complexType.
///
/// struct _cwmp__KickedResponse operations:
/// - _cwmp__KickedResponse* soap_new__cwmp__KickedResponse(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__KickedResponse(struct soap*, _cwmp__KickedResponse*) default initialize members
/// - int soap_read__cwmp__KickedResponse(struct soap*, _cwmp__KickedResponse*) deserialize from a source
/// - int soap_write__cwmp__KickedResponse(struct soap*, _cwmp__KickedResponse*) serialize to a sink
/// - _cwmp__KickedResponse* soap_dup__cwmp__KickedResponse(struct soap*, _cwmp__KickedResponse* dst, _cwmp__KickedResponse *src) returns deep copy of _cwmp__KickedResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__KickedResponse(_cwmp__KickedResponse*) deep deletes _cwmp__KickedResponse data members, use only on dst after soap_dup__cwmp__KickedResponse(NULL, _cwmp__KickedResponse *dst, _cwmp__KickedResponse *src) (use soapcpp2 -Ed)
struct _cwmp__KickedResponse
{
/// Length of this string is 0 to 1024.
    char*                                                              
                                         NextURL                        1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":RequestDownload
/// <PRE><BLOCKQUOTE>
///   RequestDownload message - Annex A.4.2.2
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":RequestDownload is a complexType.
///
/// struct _cwmp__RequestDownload operations:
/// - _cwmp__RequestDownload* soap_new__cwmp__RequestDownload(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__RequestDownload(struct soap*, _cwmp__RequestDownload*) default initialize members
/// - int soap_read__cwmp__RequestDownload(struct soap*, _cwmp__RequestDownload*) deserialize from a source
/// - int soap_write__cwmp__RequestDownload(struct soap*, _cwmp__RequestDownload*) serialize to a sink
/// - _cwmp__RequestDownload* soap_dup__cwmp__RequestDownload(struct soap*, _cwmp__RequestDownload* dst, _cwmp__RequestDownload *src) returns deep copy of _cwmp__RequestDownload src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__RequestDownload(_cwmp__RequestDownload*) deep deletes _cwmp__RequestDownload data members, use only on dst after soap_dup__cwmp__RequestDownload(NULL, _cwmp__RequestDownload *dst, _cwmp__RequestDownload *src) (use soapcpp2 -Ed)
struct _cwmp__RequestDownload
{
/// Length of this string is 0 to 64.
/// Content pattern is "1 Firmware Upgrade Image".
/// Content pattern is "2 Web Content".
/// Content pattern is "3 Vendor Configuration File".
/// Content pattern is "X [0-9A-F]{6} .*".
    char*                                                              
                                         FileType                       1;	///< Required element.
/// Element "FileTypeArg" of XSD type "urn:dslforum-org:cwmp-1-0":FileTypeArg.
    struct FileTypeArg*                  FileTypeArg                    1;	///< Required element.
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":RequestDownloadResponse
/// <PRE><BLOCKQUOTE>
///   RequestDownloadResponse message - Annex A.4.2.2
/// </BLOCKQUOTE></PRE>
/// @brief "urn:dslforum-org:cwmp-1-0":RequestDownloadResponse is a complexType.
///
/// struct _cwmp__RequestDownloadResponse operations:
/// - _cwmp__RequestDownloadResponse* soap_new__cwmp__RequestDownloadResponse(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__RequestDownloadResponse(struct soap*, _cwmp__RequestDownloadResponse*) default initialize members
/// - int soap_read__cwmp__RequestDownloadResponse(struct soap*, _cwmp__RequestDownloadResponse*) deserialize from a source
/// - int soap_write__cwmp__RequestDownloadResponse(struct soap*, _cwmp__RequestDownloadResponse*) serialize to a sink
/// - _cwmp__RequestDownloadResponse* soap_dup__cwmp__RequestDownloadResponse(struct soap*, _cwmp__RequestDownloadResponse* dst, _cwmp__RequestDownloadResponse *src) returns deep copy of _cwmp__RequestDownloadResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__RequestDownloadResponse(_cwmp__RequestDownloadResponse*) deep deletes _cwmp__RequestDownloadResponse data members, use only on dst after soap_dup__cwmp__RequestDownloadResponse(NULL, _cwmp__RequestDownloadResponse *dst, _cwmp__RequestDownloadResponse *src) (use soapcpp2 -Ed)
struct _cwmp__RequestDownloadResponse
{
};

/// @brief "urn:dslforum-org:cwmp-1-0":MethodList is a complexType with complexContent restriction of XSD type SOAP-ENC:Array.
///
/// struct MethodList operations:
/// - MethodList* soap_new_MethodList(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_MethodList(struct soap*, MethodList*) default initialize members
/// - int soap_read_MethodList(struct soap*, MethodList*) deserialize from a source
/// - int soap_write_MethodList(struct soap*, MethodList*) serialize to a sink
/// - MethodList* soap_dup_MethodList(struct soap*, MethodList* dst, MethodList *src) returns deep copy of MethodList src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_MethodList(MethodList*) deep deletes MethodList data members, use only on dst after soap_dup_MethodList(NULL, MethodList *dst, MethodList *src) (use soapcpp2 -Ed)
/// SOAP encoded array of xs:string.
struct MethodList
{
/// Pointer to array of char*.
    char*                               *__ptrstring                   ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
};

/// @brief "urn:dslforum-org:cwmp-1-0":EventList is a complexType with complexContent restriction of XSD type SOAP-ENC:Array.
///
/// struct EventList operations:
/// - EventList* soap_new_EventList(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_EventList(struct soap*, EventList*) default initialize members
/// - int soap_read_EventList(struct soap*, EventList*) deserialize from a source
/// - int soap_write_EventList(struct soap*, EventList*) serialize to a sink
/// - EventList* soap_dup_EventList(struct soap*, EventList* dst, EventList *src) returns deep copy of EventList src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_EventList(EventList*) deep deletes EventList data members, use only on dst after soap_dup_EventList(NULL, EventList *dst, EventList *src) (use soapcpp2 -Ed)
/// SOAP encoded array of "urn:dslforum-org:cwmp-1-0":EventStruct.
struct EventList
{
/// Pointer to array of struct cwmp__EventStruct*.
    struct cwmp__EventStruct*           *__ptrEventStruct              ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
};

/// @brief "urn:dslforum-org:cwmp-1-0":ParameterValueList is a complexType with complexContent restriction of XSD type SOAP-ENC:Array.
///
/// struct ParameterValueList operations:
/// - ParameterValueList* soap_new_ParameterValueList(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_ParameterValueList(struct soap*, ParameterValueList*) default initialize members
/// - int soap_read_ParameterValueList(struct soap*, ParameterValueList*) deserialize from a source
/// - int soap_write_ParameterValueList(struct soap*, ParameterValueList*) serialize to a sink
/// - ParameterValueList* soap_dup_ParameterValueList(struct soap*, ParameterValueList* dst, ParameterValueList *src) returns deep copy of ParameterValueList src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_ParameterValueList(ParameterValueList*) deep deletes ParameterValueList data members, use only on dst after soap_dup_ParameterValueList(NULL, ParameterValueList *dst, ParameterValueList *src) (use soapcpp2 -Ed)
/// SOAP encoded array of "urn:dslforum-org:cwmp-1-0":ParameterValueStruct.
struct ParameterValueList
{
/// Pointer to array of struct cwmp__ParameterValueStruct*.
    struct cwmp__ParameterValueStruct*  *__ptrParameterValueStruct     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
};

/// @brief "urn:dslforum-org:cwmp-1-0":ParameterInfoList is a complexType with complexContent restriction of XSD type SOAP-ENC:Array.
///
/// struct ParameterInfoList operations:
/// - ParameterInfoList* soap_new_ParameterInfoList(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_ParameterInfoList(struct soap*, ParameterInfoList*) default initialize members
/// - int soap_read_ParameterInfoList(struct soap*, ParameterInfoList*) deserialize from a source
/// - int soap_write_ParameterInfoList(struct soap*, ParameterInfoList*) serialize to a sink
/// - ParameterInfoList* soap_dup_ParameterInfoList(struct soap*, ParameterInfoList* dst, ParameterInfoList *src) returns deep copy of ParameterInfoList src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_ParameterInfoList(ParameterInfoList*) deep deletes ParameterInfoList data members, use only on dst after soap_dup_ParameterInfoList(NULL, ParameterInfoList *dst, ParameterInfoList *src) (use soapcpp2 -Ed)
/// SOAP encoded array of "urn:dslforum-org:cwmp-1-0":ParameterInfoStruct.
struct ParameterInfoList
{
/// Pointer to array of struct cwmp__ParameterInfoStruct*.
    struct cwmp__ParameterInfoStruct*   *__ptrParameterInfoStruct      ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
};

/// @brief "urn:dslforum-org:cwmp-1-0":ParameterNames is a complexType with complexContent restriction of XSD type SOAP-ENC:Array.
///
/// struct ParameterNames operations:
/// - ParameterNames* soap_new_ParameterNames(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_ParameterNames(struct soap*, ParameterNames*) default initialize members
/// - int soap_read_ParameterNames(struct soap*, ParameterNames*) deserialize from a source
/// - int soap_write_ParameterNames(struct soap*, ParameterNames*) serialize to a sink
/// - ParameterNames* soap_dup_ParameterNames(struct soap*, ParameterNames* dst, ParameterNames *src) returns deep copy of ParameterNames src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_ParameterNames(ParameterNames*) deep deletes ParameterNames data members, use only on dst after soap_dup_ParameterNames(NULL, ParameterNames *dst, ParameterNames *src) (use soapcpp2 -Ed)
/// SOAP encoded array of xs:string.
struct ParameterNames
{
/// Pointer to array of char*.
    char*                               *__ptrstring                   ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
};

/// @brief "urn:dslforum-org:cwmp-1-0":AccessList is a complexType with complexContent restriction of XSD type SOAP-ENC:Array.
///
/// struct AccessList operations:
/// - AccessList* soap_new_AccessList(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_AccessList(struct soap*, AccessList*) default initialize members
/// - int soap_read_AccessList(struct soap*, AccessList*) deserialize from a source
/// - int soap_write_AccessList(struct soap*, AccessList*) serialize to a sink
/// - AccessList* soap_dup_AccessList(struct soap*, AccessList* dst, AccessList *src) returns deep copy of AccessList src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_AccessList(AccessList*) deep deletes AccessList data members, use only on dst after soap_dup_AccessList(NULL, AccessList *dst, AccessList *src) (use soapcpp2 -Ed)
/// SOAP encoded array of xs:string.
struct AccessList
{
/// Pointer to array of char*.
    char*                               *__ptrstring                   ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
};

/// @brief "urn:dslforum-org:cwmp-1-0":SetParameterAttributesList is a complexType with complexContent restriction of XSD type SOAP-ENC:Array.
///
/// struct SetParameterAttributesList operations:
/// - SetParameterAttributesList* soap_new_SetParameterAttributesList(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_SetParameterAttributesList(struct soap*, SetParameterAttributesList*) default initialize members
/// - int soap_read_SetParameterAttributesList(struct soap*, SetParameterAttributesList*) deserialize from a source
/// - int soap_write_SetParameterAttributesList(struct soap*, SetParameterAttributesList*) serialize to a sink
/// - SetParameterAttributesList* soap_dup_SetParameterAttributesList(struct soap*, SetParameterAttributesList* dst, SetParameterAttributesList *src) returns deep copy of SetParameterAttributesList src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_SetParameterAttributesList(SetParameterAttributesList*) deep deletes SetParameterAttributesList data members, use only on dst after soap_dup_SetParameterAttributesList(NULL, SetParameterAttributesList *dst, SetParameterAttributesList *src) (use soapcpp2 -Ed)
/// SOAP encoded array of "urn:dslforum-org:cwmp-1-0":SetParameterAttributesStruct.
struct SetParameterAttributesList
{
/// Pointer to array of struct cwmp__SetParameterAttributesStruct*.
    struct cwmp__SetParameterAttributesStruct* *__ptrSetParameterAttributesStruct;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
};

/// @brief "urn:dslforum-org:cwmp-1-0":ParameterAttributeList is a complexType with complexContent restriction of XSD type SOAP-ENC:Array.
///
/// struct ParameterAttributeList operations:
/// - ParameterAttributeList* soap_new_ParameterAttributeList(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_ParameterAttributeList(struct soap*, ParameterAttributeList*) default initialize members
/// - int soap_read_ParameterAttributeList(struct soap*, ParameterAttributeList*) deserialize from a source
/// - int soap_write_ParameterAttributeList(struct soap*, ParameterAttributeList*) serialize to a sink
/// - ParameterAttributeList* soap_dup_ParameterAttributeList(struct soap*, ParameterAttributeList* dst, ParameterAttributeList *src) returns deep copy of ParameterAttributeList src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_ParameterAttributeList(ParameterAttributeList*) deep deletes ParameterAttributeList data members, use only on dst after soap_dup_ParameterAttributeList(NULL, ParameterAttributeList *dst, ParameterAttributeList *src) (use soapcpp2 -Ed)
/// SOAP encoded array of "urn:dslforum-org:cwmp-1-0":ParameterAttributeStruct.
struct ParameterAttributeList
{
/// Pointer to array of struct cwmp__ParameterAttributeStruct*.
    struct cwmp__ParameterAttributeStruct* *__ptrParameterAttributeStruct ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
};

/// @brief "urn:dslforum-org:cwmp-1-0":TransferList is a complexType with complexContent restriction of XSD type SOAP-ENC:Array.
///
/// struct TransferList operations:
/// - TransferList* soap_new_TransferList(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_TransferList(struct soap*, TransferList*) default initialize members
/// - int soap_read_TransferList(struct soap*, TransferList*) deserialize from a source
/// - int soap_write_TransferList(struct soap*, TransferList*) serialize to a sink
/// - TransferList* soap_dup_TransferList(struct soap*, TransferList* dst, TransferList *src) returns deep copy of TransferList src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_TransferList(TransferList*) deep deletes TransferList data members, use only on dst after soap_dup_TransferList(NULL, TransferList *dst, TransferList *src) (use soapcpp2 -Ed)
/// SOAP encoded array of "urn:dslforum-org:cwmp-1-0":QueuedTransferStruct.
struct TransferList
{
/// Pointer to array of struct cwmp__QueuedTransferStruct*.
    struct cwmp__QueuedTransferStruct*  *__ptrQueuedTransferStruct     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
};

/// @brief "urn:dslforum-org:cwmp-1-0":VoucherList is a complexType with complexContent restriction of XSD type SOAP-ENC:Array.
///
/// struct VoucherList operations:
/// - VoucherList* soap_new_VoucherList(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_VoucherList(struct soap*, VoucherList*) default initialize members
/// - int soap_read_VoucherList(struct soap*, VoucherList*) deserialize from a source
/// - int soap_write_VoucherList(struct soap*, VoucherList*) serialize to a sink
/// - VoucherList* soap_dup_VoucherList(struct soap*, VoucherList* dst, VoucherList *src) returns deep copy of VoucherList src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_VoucherList(VoucherList*) deep deletes VoucherList data members, use only on dst after soap_dup_VoucherList(NULL, VoucherList *dst, VoucherList *src) (use soapcpp2 -Ed)
/// SOAP encoded array of SOAP-ENC:base64.
struct VoucherList
{
/// Pointer to array of struct SOAP_ENC__base64.
    struct SOAP_ENC__base64             *__ptrbase64                   ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
};

/// @brief "urn:dslforum-org:cwmp-1-0":OptionList is a complexType with complexContent restriction of XSD type SOAP-ENC:Array.
///
/// struct OptionList operations:
/// - OptionList* soap_new_OptionList(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_OptionList(struct soap*, OptionList*) default initialize members
/// - int soap_read_OptionList(struct soap*, OptionList*) deserialize from a source
/// - int soap_write_OptionList(struct soap*, OptionList*) serialize to a sink
/// - OptionList* soap_dup_OptionList(struct soap*, OptionList* dst, OptionList *src) returns deep copy of OptionList src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_OptionList(OptionList*) deep deletes OptionList data members, use only on dst after soap_dup_OptionList(NULL, OptionList *dst, OptionList *src) (use soapcpp2 -Ed)
/// SOAP encoded array of "urn:dslforum-org:cwmp-1-0":OptionStruct.
struct OptionList
{
/// Pointer to array of struct cwmp__OptionStruct*.
    struct cwmp__OptionStruct*          *__ptrOptionStruct             ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
};

/// @brief "urn:dslforum-org:cwmp-1-0":FileTypeArg is a complexType with complexContent restriction of XSD type SOAP-ENC:Array.
///
/// struct FileTypeArg operations:
/// - FileTypeArg* soap_new_FileTypeArg(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_FileTypeArg(struct soap*, FileTypeArg*) default initialize members
/// - int soap_read_FileTypeArg(struct soap*, FileTypeArg*) deserialize from a source
/// - int soap_write_FileTypeArg(struct soap*, FileTypeArg*) serialize to a sink
/// - FileTypeArg* soap_dup_FileTypeArg(struct soap*, FileTypeArg* dst, FileTypeArg *src) returns deep copy of FileTypeArg src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_FileTypeArg(FileTypeArg*) deep deletes FileTypeArg data members, use only on dst after soap_dup_FileTypeArg(NULL, FileTypeArg *dst, FileTypeArg *src) (use soapcpp2 -Ed)
/// SOAP encoded array of "urn:dslforum-org:cwmp-1-0":ArgStruct.
struct FileTypeArg
{
/// Pointer to array of struct cwmp__ArgStruct*.
    struct cwmp__ArgStruct*             *__ptrArgStruct                ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":ID
/// @brief "urn:dslforum-org:cwmp-1-0":ID is a complexType with simpleContent.
///
/// struct _cwmp__ID operations:
/// - _cwmp__ID* soap_new__cwmp__ID(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__ID(struct soap*, _cwmp__ID*) default initialize members
/// - int soap_read__cwmp__ID(struct soap*, _cwmp__ID*) deserialize from a source
/// - int soap_write__cwmp__ID(struct soap*, _cwmp__ID*) serialize to a sink
/// - _cwmp__ID* soap_dup__cwmp__ID(struct soap*, _cwmp__ID* dst, _cwmp__ID *src) returns deep copy of _cwmp__ID src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__ID(_cwmp__ID*) deep deletes _cwmp__ID data members, use only on dst after soap_dup__cwmp__ID(NULL, _cwmp__ID *dst, _cwmp__ID *src) (use soapcpp2 -Ed)
struct _cwmp__ID
{
/// __item wraps "xs:string" simpleContent.
    char*                                __item                        ;
/// Imported attribute reference SOAP-ENV:mustUnderstand.
   @char*                                SOAP_ENV__mustUnderstand       1;	///< Fixed attribute value="1".
};

/// @brief Top-level root element "urn:dslforum-org:cwmp-1-0":HoldRequests
/// @brief "urn:dslforum-org:cwmp-1-0":HoldRequests is a complexType with simpleContent.
///
/// struct _cwmp__HoldRequests operations:
/// - _cwmp__HoldRequests* soap_new__cwmp__HoldRequests(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__cwmp__HoldRequests(struct soap*, _cwmp__HoldRequests*) default initialize members
/// - int soap_read__cwmp__HoldRequests(struct soap*, _cwmp__HoldRequests*) deserialize from a source
/// - int soap_write__cwmp__HoldRequests(struct soap*, _cwmp__HoldRequests*) serialize to a sink
/// - _cwmp__HoldRequests* soap_dup__cwmp__HoldRequests(struct soap*, _cwmp__HoldRequests* dst, _cwmp__HoldRequests *src) returns deep copy of _cwmp__HoldRequests src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__cwmp__HoldRequests(_cwmp__HoldRequests*) deep deletes _cwmp__HoldRequests data members, use only on dst after soap_dup__cwmp__HoldRequests(NULL, _cwmp__HoldRequests *dst, _cwmp__HoldRequests *src) (use soapcpp2 -Ed)
struct _cwmp__HoldRequests
{
/// __item wraps "xs:boolean" simpleContent.
    enum xsd__boolean                    __item                        ;
/// Imported attribute reference SOAP-ENV:mustUnderstand.
   @char*                                SOAP_ENV__mustUnderstand       1;	///< Fixed attribute value="1".
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:dslforum-org:cwmp-1-0                                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:dslforum-org:cwmp-1-0                                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section cwmp Top-level root elements of schema "urn:dslforum-org:cwmp-1-0"

  - <cwmp:ID> @ref _cwmp__ID
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__ID(struct soap*, struct _cwmp__ID*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__ID(struct soap*, struct _cwmp__ID*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__ID(struct soap*, const char *URL, struct _cwmp__ID*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__ID(struct soap*, const char *URL, struct _cwmp__ID*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__ID(struct soap*, const char *URL, struct _cwmp__ID*);
    soap_POST_recv__cwmp__ID(struct soap*, struct _cwmp__ID*);
    @endcode

  - <cwmp:HoldRequests> @ref _cwmp__HoldRequests
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__HoldRequests(struct soap*, struct _cwmp__HoldRequests*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__HoldRequests(struct soap*, struct _cwmp__HoldRequests*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__HoldRequests(struct soap*, const char *URL, struct _cwmp__HoldRequests*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__HoldRequests(struct soap*, const char *URL, struct _cwmp__HoldRequests*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__HoldRequests(struct soap*, const char *URL, struct _cwmp__HoldRequests*);
    soap_POST_recv__cwmp__HoldRequests(struct soap*, struct _cwmp__HoldRequests*);
    @endcode

  - <cwmp:Fault> @ref _cwmp__Fault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__Fault(struct soap*, struct _cwmp__Fault*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__Fault(struct soap*, struct _cwmp__Fault*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__Fault(struct soap*, const char *URL, struct _cwmp__Fault*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__Fault(struct soap*, const char *URL, struct _cwmp__Fault*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__Fault(struct soap*, const char *URL, struct _cwmp__Fault*);
    soap_POST_recv__cwmp__Fault(struct soap*, struct _cwmp__Fault*);
    @endcode

  - <cwmp:GetRPCMethods> @ref _cwmp__GetRPCMethods
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__GetRPCMethods(struct soap*, struct _cwmp__GetRPCMethods*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__GetRPCMethods(struct soap*, struct _cwmp__GetRPCMethods*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__GetRPCMethods(struct soap*, const char *URL, struct _cwmp__GetRPCMethods*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__GetRPCMethods(struct soap*, const char *URL, struct _cwmp__GetRPCMethods*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__GetRPCMethods(struct soap*, const char *URL, struct _cwmp__GetRPCMethods*);
    soap_POST_recv__cwmp__GetRPCMethods(struct soap*, struct _cwmp__GetRPCMethods*);
    @endcode

  - <cwmp:GetRPCMethodsResponse> @ref _cwmp__GetRPCMethodsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__GetRPCMethodsResponse(struct soap*, struct _cwmp__GetRPCMethodsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__GetRPCMethodsResponse(struct soap*, struct _cwmp__GetRPCMethodsResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__GetRPCMethodsResponse(struct soap*, const char *URL, struct _cwmp__GetRPCMethodsResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__GetRPCMethodsResponse(struct soap*, const char *URL, struct _cwmp__GetRPCMethodsResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__GetRPCMethodsResponse(struct soap*, const char *URL, struct _cwmp__GetRPCMethodsResponse*);
    soap_POST_recv__cwmp__GetRPCMethodsResponse(struct soap*, struct _cwmp__GetRPCMethodsResponse*);
    @endcode

  - <cwmp:SetParameterValues> @ref _cwmp__SetParameterValues
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__SetParameterValues(struct soap*, struct _cwmp__SetParameterValues*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__SetParameterValues(struct soap*, struct _cwmp__SetParameterValues*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__SetParameterValues(struct soap*, const char *URL, struct _cwmp__SetParameterValues*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__SetParameterValues(struct soap*, const char *URL, struct _cwmp__SetParameterValues*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__SetParameterValues(struct soap*, const char *URL, struct _cwmp__SetParameterValues*);
    soap_POST_recv__cwmp__SetParameterValues(struct soap*, struct _cwmp__SetParameterValues*);
    @endcode

  - <cwmp:SetParameterValuesResponse> @ref _cwmp__SetParameterValuesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__SetParameterValuesResponse(struct soap*, struct _cwmp__SetParameterValuesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__SetParameterValuesResponse(struct soap*, struct _cwmp__SetParameterValuesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__SetParameterValuesResponse(struct soap*, const char *URL, struct _cwmp__SetParameterValuesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__SetParameterValuesResponse(struct soap*, const char *URL, struct _cwmp__SetParameterValuesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__SetParameterValuesResponse(struct soap*, const char *URL, struct _cwmp__SetParameterValuesResponse*);
    soap_POST_recv__cwmp__SetParameterValuesResponse(struct soap*, struct _cwmp__SetParameterValuesResponse*);
    @endcode

  - <cwmp:GetParameterValues> @ref _cwmp__GetParameterValues
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__GetParameterValues(struct soap*, struct _cwmp__GetParameterValues*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__GetParameterValues(struct soap*, struct _cwmp__GetParameterValues*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__GetParameterValues(struct soap*, const char *URL, struct _cwmp__GetParameterValues*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__GetParameterValues(struct soap*, const char *URL, struct _cwmp__GetParameterValues*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__GetParameterValues(struct soap*, const char *URL, struct _cwmp__GetParameterValues*);
    soap_POST_recv__cwmp__GetParameterValues(struct soap*, struct _cwmp__GetParameterValues*);
    @endcode

  - <cwmp:GetParameterValuesResponse> @ref _cwmp__GetParameterValuesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__GetParameterValuesResponse(struct soap*, struct _cwmp__GetParameterValuesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__GetParameterValuesResponse(struct soap*, struct _cwmp__GetParameterValuesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__GetParameterValuesResponse(struct soap*, const char *URL, struct _cwmp__GetParameterValuesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__GetParameterValuesResponse(struct soap*, const char *URL, struct _cwmp__GetParameterValuesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__GetParameterValuesResponse(struct soap*, const char *URL, struct _cwmp__GetParameterValuesResponse*);
    soap_POST_recv__cwmp__GetParameterValuesResponse(struct soap*, struct _cwmp__GetParameterValuesResponse*);
    @endcode

  - <cwmp:GetParameterNames> @ref _cwmp__GetParameterNames
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__GetParameterNames(struct soap*, struct _cwmp__GetParameterNames*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__GetParameterNames(struct soap*, struct _cwmp__GetParameterNames*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__GetParameterNames(struct soap*, const char *URL, struct _cwmp__GetParameterNames*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__GetParameterNames(struct soap*, const char *URL, struct _cwmp__GetParameterNames*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__GetParameterNames(struct soap*, const char *URL, struct _cwmp__GetParameterNames*);
    soap_POST_recv__cwmp__GetParameterNames(struct soap*, struct _cwmp__GetParameterNames*);
    @endcode

  - <cwmp:GetParameterNamesResponse> @ref _cwmp__GetParameterNamesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__GetParameterNamesResponse(struct soap*, struct _cwmp__GetParameterNamesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__GetParameterNamesResponse(struct soap*, struct _cwmp__GetParameterNamesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__GetParameterNamesResponse(struct soap*, const char *URL, struct _cwmp__GetParameterNamesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__GetParameterNamesResponse(struct soap*, const char *URL, struct _cwmp__GetParameterNamesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__GetParameterNamesResponse(struct soap*, const char *URL, struct _cwmp__GetParameterNamesResponse*);
    soap_POST_recv__cwmp__GetParameterNamesResponse(struct soap*, struct _cwmp__GetParameterNamesResponse*);
    @endcode

  - <cwmp:SetParameterAttributes> @ref _cwmp__SetParameterAttributes
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__SetParameterAttributes(struct soap*, struct _cwmp__SetParameterAttributes*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__SetParameterAttributes(struct soap*, struct _cwmp__SetParameterAttributes*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__SetParameterAttributes(struct soap*, const char *URL, struct _cwmp__SetParameterAttributes*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__SetParameterAttributes(struct soap*, const char *URL, struct _cwmp__SetParameterAttributes*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__SetParameterAttributes(struct soap*, const char *URL, struct _cwmp__SetParameterAttributes*);
    soap_POST_recv__cwmp__SetParameterAttributes(struct soap*, struct _cwmp__SetParameterAttributes*);
    @endcode

  - <cwmp:SetParameterAttributesResponse> @ref _cwmp__SetParameterAttributesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__SetParameterAttributesResponse(struct soap*, struct _cwmp__SetParameterAttributesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__SetParameterAttributesResponse(struct soap*, struct _cwmp__SetParameterAttributesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__SetParameterAttributesResponse(struct soap*, const char *URL, struct _cwmp__SetParameterAttributesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__SetParameterAttributesResponse(struct soap*, const char *URL, struct _cwmp__SetParameterAttributesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__SetParameterAttributesResponse(struct soap*, const char *URL, struct _cwmp__SetParameterAttributesResponse*);
    soap_POST_recv__cwmp__SetParameterAttributesResponse(struct soap*, struct _cwmp__SetParameterAttributesResponse*);
    @endcode

  - <cwmp:GetParameterAttributes> @ref _cwmp__GetParameterAttributes
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__GetParameterAttributes(struct soap*, struct _cwmp__GetParameterAttributes*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__GetParameterAttributes(struct soap*, struct _cwmp__GetParameterAttributes*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__GetParameterAttributes(struct soap*, const char *URL, struct _cwmp__GetParameterAttributes*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__GetParameterAttributes(struct soap*, const char *URL, struct _cwmp__GetParameterAttributes*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__GetParameterAttributes(struct soap*, const char *URL, struct _cwmp__GetParameterAttributes*);
    soap_POST_recv__cwmp__GetParameterAttributes(struct soap*, struct _cwmp__GetParameterAttributes*);
    @endcode

  - <cwmp:GetParameterAttributesResponse> @ref _cwmp__GetParameterAttributesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__GetParameterAttributesResponse(struct soap*, struct _cwmp__GetParameterAttributesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__GetParameterAttributesResponse(struct soap*, struct _cwmp__GetParameterAttributesResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__GetParameterAttributesResponse(struct soap*, const char *URL, struct _cwmp__GetParameterAttributesResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__GetParameterAttributesResponse(struct soap*, const char *URL, struct _cwmp__GetParameterAttributesResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__GetParameterAttributesResponse(struct soap*, const char *URL, struct _cwmp__GetParameterAttributesResponse*);
    soap_POST_recv__cwmp__GetParameterAttributesResponse(struct soap*, struct _cwmp__GetParameterAttributesResponse*);
    @endcode

  - <cwmp:AddObject> @ref _cwmp__AddObject
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__AddObject(struct soap*, struct _cwmp__AddObject*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__AddObject(struct soap*, struct _cwmp__AddObject*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__AddObject(struct soap*, const char *URL, struct _cwmp__AddObject*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__AddObject(struct soap*, const char *URL, struct _cwmp__AddObject*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__AddObject(struct soap*, const char *URL, struct _cwmp__AddObject*);
    soap_POST_recv__cwmp__AddObject(struct soap*, struct _cwmp__AddObject*);
    @endcode

  - <cwmp:AddObjectResponse> @ref _cwmp__AddObjectResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__AddObjectResponse(struct soap*, struct _cwmp__AddObjectResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__AddObjectResponse(struct soap*, struct _cwmp__AddObjectResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__AddObjectResponse(struct soap*, const char *URL, struct _cwmp__AddObjectResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__AddObjectResponse(struct soap*, const char *URL, struct _cwmp__AddObjectResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__AddObjectResponse(struct soap*, const char *URL, struct _cwmp__AddObjectResponse*);
    soap_POST_recv__cwmp__AddObjectResponse(struct soap*, struct _cwmp__AddObjectResponse*);
    @endcode

  - <cwmp:DeleteObject> @ref _cwmp__DeleteObject
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__DeleteObject(struct soap*, struct _cwmp__DeleteObject*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__DeleteObject(struct soap*, struct _cwmp__DeleteObject*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__DeleteObject(struct soap*, const char *URL, struct _cwmp__DeleteObject*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__DeleteObject(struct soap*, const char *URL, struct _cwmp__DeleteObject*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__DeleteObject(struct soap*, const char *URL, struct _cwmp__DeleteObject*);
    soap_POST_recv__cwmp__DeleteObject(struct soap*, struct _cwmp__DeleteObject*);
    @endcode

  - <cwmp:DeleteObjectResponse> @ref _cwmp__DeleteObjectResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__DeleteObjectResponse(struct soap*, struct _cwmp__DeleteObjectResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__DeleteObjectResponse(struct soap*, struct _cwmp__DeleteObjectResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__DeleteObjectResponse(struct soap*, const char *URL, struct _cwmp__DeleteObjectResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__DeleteObjectResponse(struct soap*, const char *URL, struct _cwmp__DeleteObjectResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__DeleteObjectResponse(struct soap*, const char *URL, struct _cwmp__DeleteObjectResponse*);
    soap_POST_recv__cwmp__DeleteObjectResponse(struct soap*, struct _cwmp__DeleteObjectResponse*);
    @endcode

  - <cwmp:Download> @ref _cwmp__Download
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__Download(struct soap*, struct _cwmp__Download*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__Download(struct soap*, struct _cwmp__Download*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__Download(struct soap*, const char *URL, struct _cwmp__Download*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__Download(struct soap*, const char *URL, struct _cwmp__Download*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__Download(struct soap*, const char *URL, struct _cwmp__Download*);
    soap_POST_recv__cwmp__Download(struct soap*, struct _cwmp__Download*);
    @endcode

  - <cwmp:DownloadResponse> @ref _cwmp__DownloadResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__DownloadResponse(struct soap*, struct _cwmp__DownloadResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__DownloadResponse(struct soap*, struct _cwmp__DownloadResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__DownloadResponse(struct soap*, const char *URL, struct _cwmp__DownloadResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__DownloadResponse(struct soap*, const char *URL, struct _cwmp__DownloadResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__DownloadResponse(struct soap*, const char *URL, struct _cwmp__DownloadResponse*);
    soap_POST_recv__cwmp__DownloadResponse(struct soap*, struct _cwmp__DownloadResponse*);
    @endcode

  - <cwmp:Reboot> @ref _cwmp__Reboot
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__Reboot(struct soap*, struct _cwmp__Reboot*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__Reboot(struct soap*, struct _cwmp__Reboot*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__Reboot(struct soap*, const char *URL, struct _cwmp__Reboot*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__Reboot(struct soap*, const char *URL, struct _cwmp__Reboot*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__Reboot(struct soap*, const char *URL, struct _cwmp__Reboot*);
    soap_POST_recv__cwmp__Reboot(struct soap*, struct _cwmp__Reboot*);
    @endcode

  - <cwmp:RebootResponse> @ref _cwmp__RebootResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__RebootResponse(struct soap*, struct _cwmp__RebootResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__RebootResponse(struct soap*, struct _cwmp__RebootResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__RebootResponse(struct soap*, const char *URL, struct _cwmp__RebootResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__RebootResponse(struct soap*, const char *URL, struct _cwmp__RebootResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__RebootResponse(struct soap*, const char *URL, struct _cwmp__RebootResponse*);
    soap_POST_recv__cwmp__RebootResponse(struct soap*, struct _cwmp__RebootResponse*);
    @endcode

  - <cwmp:GetQueuedTransfers> @ref _cwmp__GetQueuedTransfers
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__GetQueuedTransfers(struct soap*, struct _cwmp__GetQueuedTransfers*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__GetQueuedTransfers(struct soap*, struct _cwmp__GetQueuedTransfers*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__GetQueuedTransfers(struct soap*, const char *URL, struct _cwmp__GetQueuedTransfers*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__GetQueuedTransfers(struct soap*, const char *URL, struct _cwmp__GetQueuedTransfers*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__GetQueuedTransfers(struct soap*, const char *URL, struct _cwmp__GetQueuedTransfers*);
    soap_POST_recv__cwmp__GetQueuedTransfers(struct soap*, struct _cwmp__GetQueuedTransfers*);
    @endcode

  - <cwmp:GetQueuedTransfersResponse> @ref _cwmp__GetQueuedTransfersResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__GetQueuedTransfersResponse(struct soap*, struct _cwmp__GetQueuedTransfersResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__GetQueuedTransfersResponse(struct soap*, struct _cwmp__GetQueuedTransfersResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__GetQueuedTransfersResponse(struct soap*, const char *URL, struct _cwmp__GetQueuedTransfersResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__GetQueuedTransfersResponse(struct soap*, const char *URL, struct _cwmp__GetQueuedTransfersResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__GetQueuedTransfersResponse(struct soap*, const char *URL, struct _cwmp__GetQueuedTransfersResponse*);
    soap_POST_recv__cwmp__GetQueuedTransfersResponse(struct soap*, struct _cwmp__GetQueuedTransfersResponse*);
    @endcode

  - <cwmp:ScheduleInform> @ref _cwmp__ScheduleInform
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__ScheduleInform(struct soap*, struct _cwmp__ScheduleInform*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__ScheduleInform(struct soap*, struct _cwmp__ScheduleInform*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__ScheduleInform(struct soap*, const char *URL, struct _cwmp__ScheduleInform*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__ScheduleInform(struct soap*, const char *URL, struct _cwmp__ScheduleInform*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__ScheduleInform(struct soap*, const char *URL, struct _cwmp__ScheduleInform*);
    soap_POST_recv__cwmp__ScheduleInform(struct soap*, struct _cwmp__ScheduleInform*);
    @endcode

  - <cwmp:ScheduleInformResponse> @ref _cwmp__ScheduleInformResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__ScheduleInformResponse(struct soap*, struct _cwmp__ScheduleInformResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__ScheduleInformResponse(struct soap*, struct _cwmp__ScheduleInformResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__ScheduleInformResponse(struct soap*, const char *URL, struct _cwmp__ScheduleInformResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__ScheduleInformResponse(struct soap*, const char *URL, struct _cwmp__ScheduleInformResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__ScheduleInformResponse(struct soap*, const char *URL, struct _cwmp__ScheduleInformResponse*);
    soap_POST_recv__cwmp__ScheduleInformResponse(struct soap*, struct _cwmp__ScheduleInformResponse*);
    @endcode

  - <cwmp:SetVouchers> @ref _cwmp__SetVouchers
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__SetVouchers(struct soap*, struct _cwmp__SetVouchers*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__SetVouchers(struct soap*, struct _cwmp__SetVouchers*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__SetVouchers(struct soap*, const char *URL, struct _cwmp__SetVouchers*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__SetVouchers(struct soap*, const char *URL, struct _cwmp__SetVouchers*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__SetVouchers(struct soap*, const char *URL, struct _cwmp__SetVouchers*);
    soap_POST_recv__cwmp__SetVouchers(struct soap*, struct _cwmp__SetVouchers*);
    @endcode

  - <cwmp:SetVouchersResponse> @ref _cwmp__SetVouchersResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__SetVouchersResponse(struct soap*, struct _cwmp__SetVouchersResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__SetVouchersResponse(struct soap*, struct _cwmp__SetVouchersResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__SetVouchersResponse(struct soap*, const char *URL, struct _cwmp__SetVouchersResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__SetVouchersResponse(struct soap*, const char *URL, struct _cwmp__SetVouchersResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__SetVouchersResponse(struct soap*, const char *URL, struct _cwmp__SetVouchersResponse*);
    soap_POST_recv__cwmp__SetVouchersResponse(struct soap*, struct _cwmp__SetVouchersResponse*);
    @endcode

  - <cwmp:GetOptions> @ref _cwmp__GetOptions
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__GetOptions(struct soap*, struct _cwmp__GetOptions*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__GetOptions(struct soap*, struct _cwmp__GetOptions*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__GetOptions(struct soap*, const char *URL, struct _cwmp__GetOptions*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__GetOptions(struct soap*, const char *URL, struct _cwmp__GetOptions*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__GetOptions(struct soap*, const char *URL, struct _cwmp__GetOptions*);
    soap_POST_recv__cwmp__GetOptions(struct soap*, struct _cwmp__GetOptions*);
    @endcode

  - <cwmp:GetOptionsResponse> @ref _cwmp__GetOptionsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__GetOptionsResponse(struct soap*, struct _cwmp__GetOptionsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__GetOptionsResponse(struct soap*, struct _cwmp__GetOptionsResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__GetOptionsResponse(struct soap*, const char *URL, struct _cwmp__GetOptionsResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__GetOptionsResponse(struct soap*, const char *URL, struct _cwmp__GetOptionsResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__GetOptionsResponse(struct soap*, const char *URL, struct _cwmp__GetOptionsResponse*);
    soap_POST_recv__cwmp__GetOptionsResponse(struct soap*, struct _cwmp__GetOptionsResponse*);
    @endcode

  - <cwmp:Upload> @ref _cwmp__Upload
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__Upload(struct soap*, struct _cwmp__Upload*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__Upload(struct soap*, struct _cwmp__Upload*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__Upload(struct soap*, const char *URL, struct _cwmp__Upload*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__Upload(struct soap*, const char *URL, struct _cwmp__Upload*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__Upload(struct soap*, const char *URL, struct _cwmp__Upload*);
    soap_POST_recv__cwmp__Upload(struct soap*, struct _cwmp__Upload*);
    @endcode

  - <cwmp:UploadResponse> @ref _cwmp__UploadResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__UploadResponse(struct soap*, struct _cwmp__UploadResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__UploadResponse(struct soap*, struct _cwmp__UploadResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__UploadResponse(struct soap*, const char *URL, struct _cwmp__UploadResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__UploadResponse(struct soap*, const char *URL, struct _cwmp__UploadResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__UploadResponse(struct soap*, const char *URL, struct _cwmp__UploadResponse*);
    soap_POST_recv__cwmp__UploadResponse(struct soap*, struct _cwmp__UploadResponse*);
    @endcode

  - <cwmp:FactoryReset> @ref _cwmp__FactoryReset
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__FactoryReset(struct soap*, struct _cwmp__FactoryReset*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__FactoryReset(struct soap*, struct _cwmp__FactoryReset*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__FactoryReset(struct soap*, const char *URL, struct _cwmp__FactoryReset*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__FactoryReset(struct soap*, const char *URL, struct _cwmp__FactoryReset*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__FactoryReset(struct soap*, const char *URL, struct _cwmp__FactoryReset*);
    soap_POST_recv__cwmp__FactoryReset(struct soap*, struct _cwmp__FactoryReset*);
    @endcode

  - <cwmp:FactoryResetResponse> @ref _cwmp__FactoryResetResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__FactoryResetResponse(struct soap*, struct _cwmp__FactoryResetResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__FactoryResetResponse(struct soap*, struct _cwmp__FactoryResetResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__FactoryResetResponse(struct soap*, const char *URL, struct _cwmp__FactoryResetResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__FactoryResetResponse(struct soap*, const char *URL, struct _cwmp__FactoryResetResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__FactoryResetResponse(struct soap*, const char *URL, struct _cwmp__FactoryResetResponse*);
    soap_POST_recv__cwmp__FactoryResetResponse(struct soap*, struct _cwmp__FactoryResetResponse*);
    @endcode

  - <cwmp:Inform> @ref _cwmp__Inform
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__Inform(struct soap*, struct _cwmp__Inform*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__Inform(struct soap*, struct _cwmp__Inform*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__Inform(struct soap*, const char *URL, struct _cwmp__Inform*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__Inform(struct soap*, const char *URL, struct _cwmp__Inform*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__Inform(struct soap*, const char *URL, struct _cwmp__Inform*);
    soap_POST_recv__cwmp__Inform(struct soap*, struct _cwmp__Inform*);
    @endcode

  - <cwmp:InformResponse> @ref _cwmp__InformResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__InformResponse(struct soap*, struct _cwmp__InformResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__InformResponse(struct soap*, struct _cwmp__InformResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__InformResponse(struct soap*, const char *URL, struct _cwmp__InformResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__InformResponse(struct soap*, const char *URL, struct _cwmp__InformResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__InformResponse(struct soap*, const char *URL, struct _cwmp__InformResponse*);
    soap_POST_recv__cwmp__InformResponse(struct soap*, struct _cwmp__InformResponse*);
    @endcode

  - <cwmp:TransferComplete> @ref _cwmp__TransferComplete
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__TransferComplete(struct soap*, struct _cwmp__TransferComplete*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__TransferComplete(struct soap*, struct _cwmp__TransferComplete*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__TransferComplete(struct soap*, const char *URL, struct _cwmp__TransferComplete*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__TransferComplete(struct soap*, const char *URL, struct _cwmp__TransferComplete*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__TransferComplete(struct soap*, const char *URL, struct _cwmp__TransferComplete*);
    soap_POST_recv__cwmp__TransferComplete(struct soap*, struct _cwmp__TransferComplete*);
    @endcode

  - <cwmp:TransferCompleteResponse> @ref _cwmp__TransferCompleteResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__TransferCompleteResponse(struct soap*, struct _cwmp__TransferCompleteResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__TransferCompleteResponse(struct soap*, struct _cwmp__TransferCompleteResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__TransferCompleteResponse(struct soap*, const char *URL, struct _cwmp__TransferCompleteResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__TransferCompleteResponse(struct soap*, const char *URL, struct _cwmp__TransferCompleteResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__TransferCompleteResponse(struct soap*, const char *URL, struct _cwmp__TransferCompleteResponse*);
    soap_POST_recv__cwmp__TransferCompleteResponse(struct soap*, struct _cwmp__TransferCompleteResponse*);
    @endcode

  - <cwmp:Kicked> @ref _cwmp__Kicked
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__Kicked(struct soap*, struct _cwmp__Kicked*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__Kicked(struct soap*, struct _cwmp__Kicked*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__Kicked(struct soap*, const char *URL, struct _cwmp__Kicked*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__Kicked(struct soap*, const char *URL, struct _cwmp__Kicked*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__Kicked(struct soap*, const char *URL, struct _cwmp__Kicked*);
    soap_POST_recv__cwmp__Kicked(struct soap*, struct _cwmp__Kicked*);
    @endcode

  - <cwmp:KickedResponse> @ref _cwmp__KickedResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__KickedResponse(struct soap*, struct _cwmp__KickedResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__KickedResponse(struct soap*, struct _cwmp__KickedResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__KickedResponse(struct soap*, const char *URL, struct _cwmp__KickedResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__KickedResponse(struct soap*, const char *URL, struct _cwmp__KickedResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__KickedResponse(struct soap*, const char *URL, struct _cwmp__KickedResponse*);
    soap_POST_recv__cwmp__KickedResponse(struct soap*, struct _cwmp__KickedResponse*);
    @endcode

  - <cwmp:RequestDownload> @ref _cwmp__RequestDownload
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__RequestDownload(struct soap*, struct _cwmp__RequestDownload*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__RequestDownload(struct soap*, struct _cwmp__RequestDownload*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__RequestDownload(struct soap*, const char *URL, struct _cwmp__RequestDownload*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__RequestDownload(struct soap*, const char *URL, struct _cwmp__RequestDownload*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__RequestDownload(struct soap*, const char *URL, struct _cwmp__RequestDownload*);
    soap_POST_recv__cwmp__RequestDownload(struct soap*, struct _cwmp__RequestDownload*);
    @endcode

  - <cwmp:RequestDownloadResponse> @ref _cwmp__RequestDownloadResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__cwmp__RequestDownloadResponse(struct soap*, struct _cwmp__RequestDownloadResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__cwmp__RequestDownloadResponse(struct soap*, struct _cwmp__RequestDownloadResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__cwmp__RequestDownloadResponse(struct soap*, const char *URL, struct _cwmp__RequestDownloadResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__cwmp__RequestDownloadResponse(struct soap*, const char *URL, struct _cwmp__RequestDownloadResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__cwmp__RequestDownloadResponse(struct soap*, const char *URL, struct _cwmp__RequestDownloadResponse*);
    soap_POST_recv__cwmp__RequestDownloadResponse(struct soap*, struct _cwmp__RequestDownloadResponse*);
    @endcode

*/

/* End of cwmp.h */
